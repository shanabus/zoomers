@inject HttpClient Http
@using ZoomersClient.Client.Components.Players
@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ZoomersClient.Shared.Services.GameService GameService
@using Toolbelt.Blazor.SpeechSynthesis
@using ZoomersClient.Shared.Models.Enums
@inject SpeechSynthesis SpeechSynthesis

@if (Game != null)
{
    <div class='row @((State != GameState.Ending)? "slide-in-blurred-bottom": "slide-out-fwd-center")'>
        <div class="col">            
            @if(CurrentQuestion != null)
            {
                <div class="jumbotron swing-in-top-fwd" id="current-question">
                    @CurrentQuestion.Question
                </div>
            }         
                <div class="game-round text-dark">
                    Question @Game.Questions.Count
                </div>

                <div class="row">                    
                @if(CurrentPlayer != null)
                {
                    <div class="col-4">
                        <PlayerBadge Player="CurrentPlayer"></PlayerBadge>
                    </div>                     
                }      
                    <div class="col-8 pt-3">
                        <h3>@StatusMessage</h3>
                    </div>
                </div>                
            <hr />
        </div>
    </div>    
    
    @if(State == GameState.Playing && false)
    {
        <Timer @ref="timerRef" Class="slide-in-blurred-bottom" TimeEllapsed="AnswersFinished"></Timer>
    }  
    @if(State == GameState.Summary && CurrentPlayerAnswers.Any())
    {
        <Scorecard @ref="scorecardRef" Score="@CurrentPlayerScore" Class="slide-in-blurred-bottom"></Scorecard>
    }    

    @if(PlayersAnswered.Any() && State != GameState.Ending)
    {
        <div class="row">
        @foreach(var player in PlayersAnswered)
        {
            <div class="col my-2">
                <PlayerBadge Player="@player" Class="slide-in-blurred-bottom"></PlayerBadge>
                
                @if(State == GameState.Summary)
                {
                    var playerAnswer = Game.AnsweredQuestions.FirstOrDefault(x => x.Player.Id == player.Id)?.Answer;
                    var currentPlayerAnswer = CurrentPlayerAnswers.FirstOrDefault(x => x.Player.Id == player.Id)?.Answer;

                    <PlayerAnswerResult PlayerAnswer="@playerAnswer" CurrentPlayer="CurrentPlayer" CurrentPlayerAnswer="@currentPlayerAnswer" Show="@(ScoreShown > PlayersAnswered.IndexOf(player))"></PlayerAnswerResult>
                }
    
            </div>
        }
        </div>
    }

    @if(State == GameState.Ending)
    {
        <div class="row">
        @foreach(var player in Game.Players)
        {
            <div class="col my-2">
                <PlayerBadge Player="player">
                    @if(ScoreShown > Game.Players.IndexOf(player))
                    {
                        <span style="color: orange;">@player.Score</span>
                    }
                </PlayerBadge>                
            </div>
        }
        </div>
    }
}

@code {

    [Parameter]
    public Game Game { get; set; }
    [CascadingParameter]
    public GameState State { get; set; }
    public Player CurrentPlayer { get; set; }
    public string StatusMessage { get; set; }
    public WordPlayQuestion CurrentQuestion { get; set; }
    public List<Player> PlayersAnswered { get; set; }
    private Timer timerRef { get; set; }

    public List<AnsweredQuestion> CurrentPlayerAnswers { get; set; }
    public int CurrentPlayerScore { get; set; }
    private Scorecard scorecardRef { get; set; }
    private int ScoreShown { get; set; }

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        PlayersAnswered = new List<Player>();
                
        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/{Game.GameType}hub"))
            .Build();

        // subscribe to game events             
        hubConnection.On<Game, WordPlayQuestion, Player>("QuestionReady", (game, question, player) =>
        {   
            // reset UI            
            Game = game;
            CurrentQuestion = question;
            CurrentPlayer = player;
            CurrentPlayerAnswers = new List<AnsweredQuestion>();
            PlayersAnswered = new List<Player>();
            State = GameState.Playing;
            CurrentPlayerScore = 0;
            ScoreShown = 0;

            // timerRef.ResetTimer();

            // timerRef.StartTimer(30);

            StateHasChanged();

            SpeakPhrase(question.Question);
        });

        hubConnection.On<Game, Player>("QuestionAnswered", async (game, player) => {
            Game = game;
            PlayersAnswered.Add(player);
            StateHasChanged();

            if (PlayersAnswered.Count >= Game.Players.Count - 1)
            {
                await AnswersFinished();
            }
        });

        hubConnection.On<Game, SpeechSynthesisUtterance>("AnswersFinished", (game, phrase) => {
            Game = game;
            StatusMessage = phrase.Text;
            StateHasChanged();
            SpeakPhrase(phrase.Text);
        });        
        
        hubConnection.On<bool, List<AnsweredQuestion>>("QuestionSummaryStarted", async (timeExpired, currentPlayerAnswers) => {
            StatusMessage = $"Time to see how you did";
            CurrentPlayerAnswers = currentPlayerAnswers;
            State = GameState.Summary;
            StateHasChanged();

            foreach(var player in PlayersAnswered)
            {
                var playerAnswer = Game.AnsweredQuestions.FirstOrDefault(x => x.Player.Id == player.Id)?.Answer;
                var currentPlayerAnswer = CurrentPlayerAnswers.FirstOrDefault(x => x.Player.Id == player.Id)?.Answer;

                await Task.Delay(1000);
                ScoreShown++;
                
                if (playerAnswer == currentPlayerAnswer)
                {
                    CurrentPlayerScore += 100;
                }
                
                StateHasChanged();
            }

            if (!currentPlayerAnswers.Any()) {
                SpeakPhrase("Nobody had an answer? Strange...  Ok we will move onto the next question");
            }

            // record score?
            await Task.Delay(3000);            
            await hubConnection.SendAsync("QuestionFinished", Game.Id, CurrentQuestion.Id, CurrentPlayerScore);
        });

        hubConnection.On<Game>("ProceedToNextQuestion", async (game) => {
            Game = game;            
            await hubConnection.SendAsync("AskQuestion", Game.Id);
        });

        hubConnection.On<Game>("GameOver", async (game) => {
            Game = game;
            StatusMessage = "Game Over";
            State = GameState.Ending;
            StateHasChanged();


            SpeakPhrase("That wraps up this game of Word Play. Let's check the scores.");

            foreach(var player in Game.Players)
            {
                ScoreShown++;              
                StateHasChanged();

                await Task.Delay(1000);
            }

            var winner = Game.Players.OrderByDescending(x => x.Score).FirstOrDefault();

            SpeakPhrase("The winner is " + winner.Username);

            await Task.Delay(2000);

            if (Game.Players.Sum(x => x.Score) == 0)
            {
                SpeakPhrase("But you all need to learn more about each other");
            }
            if (Game.Players.Count(x => x.Score == winner.Score) > 1)
            {
                SpeakPhrase("Although there were others in the running. Congratulations, you are all winners!");
            }
        }); 

        // start hub
        await hubConnection.StartAsync();
        
        // get player on deck, ask first question
        await hubConnection.SendAsync("AskQuestion", Game.Id);

        // await hubConnection.SendAsync("Subscribe", Id);
    }

    public async Task AnswersFinished()
    {        
        // timerRef.ResetTimer();
        State = GameState.PlayerChoosing;
        Console.WriteLine("Something told me to fire AnswersFinished");
        await hubConnection.SendAsync("AnswersFinished", Game.Id, CurrentPlayer.Username);
        StateHasChanged();
    }

    private void SpeakPhrase(string message)
    {
        if (this.SpeechSynthesis.Speaking)
        {
            this.SpeechSynthesis.Cancel();
        }
        
        this.SpeechSynthesis.Speak(new SpeechSynthesisUtterance() {
            Lang = Game.Voice,
            Text = message
        });
    }
    
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }    
}
