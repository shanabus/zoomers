@page "/play/{id}"
@inject HttpClient Http
@layout PlayerLayout
@using Microsoft.AspNetCore.SignalR.Client
@using ZoomersClient.Client.Components
@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models
@using Blazored.LocalStorage;
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@if(Game != null){
    <h1>@Game.Name</h1>

    @if(CurrentQuestion != null)
    {        
        <div class="@((AnswerSubmitted)? "slide-out-fwd-center": "swing-in-top-fwd")">
            
            <p>@CurrentQuestion.Question</p>

            <div class="row my-4">
                <div class="col">
                    <input @bind-value="Answer" class="form-control" />
                </div>
            </div>

            <div class="row my-4">
                <div class="col">
                    <button class="btn btn-success w-100 text-center" @onclick="SubmitAnswer" disabled="@AnswerSubmitted">SUBMIT</button>
                </div>
            </div>
        </div>
            
        
        @if (AnswerSubmitted)
        {
            <div class="row">
                <div class="col">
                    Hang tight while others submit their answers...
                </div>
            </div>
        }
    }
}
else 
{
    <LoadingMessage Message="Loading Game..."></LoadingMessage>
}



@code {

    private HubConnection hubConnection;
    [Parameter]
    public string Id { get; set; }
    public Player CurrentPlayer { get; set; }
    public string Answer { get; set; }
    public bool AnswerSubmitted { get; set; }
    public Game Game { get; set;}
    public WordPlayQuestion CurrentQuestion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Game = await Http.GetFromJsonAsync<Game>($"Games/{Id}");

        CurrentPlayer = await GetPlayerFromStorage();
            
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/{Game.GameType}hub"))
            .Build();

        // subscribe to other things
        hubConnection.On<WordPlayQuestion>("QuestionReady", (question) =>
        {               
            CurrentQuestion = question;
            StateHasChanged();
            Console.WriteLine("Player received question (QuestionReady) : " + question.Question);            
        });

        // start hub
        await hubConnection.StartAsync();

        await hubConnection.SendAsync("UpdateConnectionId", CurrentPlayer.Id);
    }

    public async Task SubmitAnswer() {
        Console.WriteLine("An answer was submitted!");
        AnswerSubmitted = true;
        await hubConnection.SendAsync("AnswerQuestion", Game.Id, CurrentQuestion.Id, CurrentPlayer.Id, Answer);
        StateHasChanged();
    }

    public async Task<Player> GetPlayerFromStorage()
    {
        var playerExists = await localStore.ContainKeyAsync("player");
        if (playerExists)
        {
            var player = await localStore.GetItemAsync<Player>("player");

            return player;
        }
        
        throw new Exception("Player not found!");        
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}