@inject HttpClient Http
@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ZoomersClient.Shared.Services.GameService GameService
@using Toolbelt.Blazor.SpeechSynthesis
@using ZoomersClient.Shared.Models.Enums
@inject SpeechSynthesis SpeechSynthesis

@if (Game != null)
{
    <div class="row">
        <div class="col">            
            @if(CurrentQuestion != null)
            {
                <div class="jumbotron swing-in-top-fwd" id="current-question">
                    @CurrentQuestion.Question
                </div>
            }         

            @if(CurrentPlayer != null)
            {
                <div class="row">
                    <div class="col">
                        <PlayerIconButton Icon="CurrentPlayer.Icon"></PlayerIconButton>
                    </div>
                </div>
                
            }
        </div>
    </div>    

    <div class="row my-4">
        <div class="col">
            <h3>@StatusMessage</h3>
        </div>
    </div>
    
    @if(State == GameState.Playing)
    {
        <Timer @ref="timerRef" Seconds="30" Class="slide-in-blurred-bottom" TimeEllapsed="AnswersFinished"></Timer>
    }
    
    
    @if(PlayersAnswered.Any())
    {
        <div class="row">
        @foreach(var player in PlayersAnswered)
        {
            <div class="col">
                <PlayerBadge Player="@player" Class="my-4 slide-in-blurred-bottom"></PlayerBadge>
            </div>
        }
        </div>
    }
}

@code {

    [Parameter]
    public Game Game { get; set; }
    [CascadingParameter]
    public GameState State { get; set; }
    public Player CurrentPlayer { get; set; }
    public string StatusMessage { get; set; }
    public WordPlayQuestion CurrentQuestion { get; set; }
    public List<Player> PlayersAnswered { get; set; }
    public bool StartClock { get; set; }
    private Timer timerRef { get; set; }

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        PlayersAnswered = new List<Player>();
                
        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/{Game.GameType}hub"))
            .Build();

        // subscribe to game events     
        
        hubConnection.On<WordPlayQuestion, Player>("QuestionReady", (question, player) =>
        {               
            CurrentQuestion = question;
            CurrentPlayer = player;
            timerRef.StartTimer();

            StateHasChanged();

            Console.WriteLine(question.Question);
            SpeakPhrase(question.Question);
        });

        hubConnection.On<Game, Player>("QuestionAnswered", async (game, player) => {
            Game = game;
            PlayersAnswered.Add(player);

            StateHasChanged();

            if (PlayersAnswered.Count >= Game.Players.Count - 1)
            {
                Console.WriteLine("Players have all answered, proceed! " + PlayersAnswered.Count);
                await AnswersFinished();
            }
        });

        hubConnection.On<Game, SpeechSynthesisUtterance>("AnswersFinished", (game, phrase) => {
            Console.WriteLine("finished Answers - " + phrase.Text);
            StatusMessage = phrase.Text;
            StateHasChanged();
            SpeakPhrase(phrase.Text);
        });        

        // start hub
        await hubConnection.StartAsync();
        
        // get player on deck, ask first question
        await hubConnection.SendAsync("AskQuestion", Game.Id);

        // await hubConnection.SendAsync("Subscribe", Id);
    }

    public async Task AnswersFinished()
    {
        timerRef.StopTimer();
        State = GameState.PlayerChoosing;
        await hubConnection.SendAsync("AnswersFinished", Game.Id, CurrentPlayer.Username);
        StateHasChanged();
    }

    private void SpeakPhrase(string message)
    {
        if (this.SpeechSynthesis.Speaking)
        {
            this.SpeechSynthesis.Cancel();
        }
        
        this.SpeechSynthesis.Speak(new SpeechSynthesisUtterance() {
            Lang = Game.Voice,
            Text = message
        });
    }
    
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }    
}
