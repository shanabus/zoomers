@page "/game/{id}"
@layout GameLayout
@inject HttpClient Http
@using ZoomersClient.Client.Components.Host
@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models
@using ZoomersClient.Client.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@using Toolbelt.Blazor.SpeechSynthesis
@using ZoomersClient.Shared.Models.Enums
@inject SpeechSynthesis SpeechSynthesis

@if (Game != null && State == GameState.Lobby)
{
    <div class="@((State == GameState.Starting)? "slide-out-fwd-center":"bg-pan-left")">
        <Lobby Game="Game" StatusMessage="@StatusMessage"></Lobby>
    </div>
    
}
else if (State == GameState.Tutorial)
{
    <Tutorial></Tutorial>
}
else if (State == GameState.Playing)
{
    <CascadingValue Value="State">
        <PlayGame Game="Game" OnGameReset="OnGameResetAsync"></PlayGame>
    </CascadingValue>
}
else
{
    <LoadingMessage Message="Loading Game..."></LoadingMessage>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public Game Game { get; set; }
    public string StatusMessage { get; set; }
    public GameState State { get; set; }
    
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Game = await Http.GetFromJsonAsync<Game>($"Games/{Id}");
        State = GameState.Lobby;
        StatusMessage = "Scan the QR code with your phone and enter the Party Code to join the lobby";
        SpeakMessage(new SpeechSynthesisUtterance() {
            Text = StatusMessage,
            Lang = Game.Voice
        });

        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        // subscribe to other things
        hubConnection.On<Game, Player, SpeechSynthesisUtterance>("PlayersUpdated", (game, player, phrase) =>
        {            
            Game = game;
            if (Game.Players.Count > 3) {
                StatusMessage = "Hey " + Game.Players.First().Username + ", press 'START GAME' when everybody is in";
            }
            StateHasChanged();
                        
            SpeakMessage(phrase);
        });

        hubConnection.On<Guid>("GameStarted", (id) =>
        {            
            this.SpeechSynthesis.Speak(new SpeechSynthesisUtterance() {
                Lang = Game.Voice,
                Text = $"Ok, let us begin the game!"
            }); 
            
            State = GameState.Starting;
            StateHasChanged();

            Task.Run(async() => {
                await Task.Delay(500);
                State = GameState.Playing;
                StateHasChanged();
            });
        });

        hubConnection.On<int, string>("TooManyPlayersWarning", (maxPlayers, user) => {
            var lobbyFull = new SpeechSynthesisUtterance() {
                Text = "Sorry " + user + " but this game only allows for " + maxPlayers.ToString() + " players",
                Lang = Game.Voice
            };
            SpeakMessage(lobbyFull);
        });

        // start hub
        await hubConnection.StartAsync();

        await hubConnection.SendAsync("Subscribe", Id);
    }

    private void SpeakMessage(SpeechSynthesisUtterance phrase)
    {
        if (this.SpeechSynthesis.Speaking)
        {
            this.SpeechSynthesis.Cancel();
        }
        
        this.SpeechSynthesis.Speak(phrase);         
    }

    public async Task<SpokenPhrase> GetRandomWelcome(string username, string voice)
    {
        var message = await Http.GetFromJsonAsync<SpokenPhrase>($"Games/{Game.Id}/playerjoinedphrases?username={username}&voice={voice}");

        return message;
    }

    public void OnGameResetAsync(Game game)
    {
        Console.WriteLine("Reset game!");
        Game = game;
        StateHasChanged();
                
        NavigationManager.NavigateTo($"/");

        // await this.OnInitializedAsync();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }    
}
