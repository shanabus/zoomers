@page "/play/{id}"
@inject HttpClient Http
@layout PlayerLayout
@using Microsoft.AspNetCore.SignalR.Client
@using Toolbelt.Blazor.SpeechSynthesis
@using ZoomersClient.Client.Components.Players
@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models.DTOs
@using ZoomersClient.Shared.Models.Enums
@using ZoomersClient.Shared
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject ZoomersClient.Shared.Services.BlazorTimer BlazorTimer
@implements IAsyncDisposable

@if(Game != null && Player != null && Game.CurrentPlayer != null)
{
    <div class='row @(PlayerIsCurrentPlayer? "currentplayer" : "")' id="game-banner">
        <div class="col-9 pt-2">
            <h1>@Game.Name</h1>
        </div>
        <div class="col-3 d-flex justify-content-end align-self-start">
            <PlayerIconButton Icon="@Player.Icon" BackgroundColor="@Player.BackgroundColor" Class="rotate-in-center mt-2"></PlayerIconButton>
        </div>
    </div>    
    
    @if(State == PlayState.None)
    {
        <p>Could not determine game state.</p>
    }

    @if(State == PlayState.AnsweringQuestion && CurrentQuestion != null)
    {        
        <div class="swing-in-top-fwd">
            
            <h4 class="my-4">@CurrentQuestion.Question</h4>

            <div class="row my-4">
                <div class="col">
                    <form @onsubmit="SubmitAnswer">
                        <input @bind-value="Answer" class="form-control" maxlength="42" />
                    </form>
                </div>
            </div>

            @if(!string.IsNullOrEmpty(CurrentQuestion.ImageUrl))
            {
                <div class="row">
                    <div class="col text-center">
                        <img src="@CurrentQuestion.ImageUrl" class="img-fluid img-question" />
                    </div>
                </div>
            }

            <div class="row my-4">
                <div class="col">
                    <button class="btn btn-success w-100 text-center" @onclick="SubmitAnswer" disabled="@(string.IsNullOrEmpty(Answer))">SUBMIT ANSWER</button>
                </div>
            </div>
        </div>
    }
    
    @if(State == PlayState.AnswerSubmitted)
    {
        <h4 class="mt-4">Congrats, your answer has been counted!</h4>
                
        @if(Game.CurrentAnswers().Any())
        {
            <p>Click emoji buttons to share a reaction.</p>
        }

        @foreach(var answer in Game.CurrentAnswers())
        {
            <div class="row my-2">
                <div class="col-10 p-2 offset-1 bg-light">
                    @answer.Answer
                    @if(answer.Player.Id != Player.Id)
                    {
                        <ReactionButtons Answer="@answer" OnClick="OnAnswerReaction"></ReactionButtons>
                    }
                </div>
            </div>
        }
        @if (Game.CurrentAnswers().Count > 0)
        {
            var playerAnswer = Game.CurrentAnswers().FirstOrDefault(x => x.Player.Id == Player.Id);

            if (playerAnswer != null && !playerAnswer.AnswerTimedOut)
            {
                <AnswersCorrectPanel MaxCount="@Game.CurrentAnswers().Count" CorrectCount="CurrentGuess" Submitted="CurrentGuess.HasValue" Username="@Game.CurrentPlayer.Username" OnSubmit="SubmitQuestionGuessAsync"></AnswersCorrectPanel>
            }
            else
            {
                <span class="text-white">You didn't answer this round!</span>
            }
        }        
    }

    @if(State == PlayState.CurrentPlayerWaiting && CurrentQuestion != null)
    {
        <h4 class="my-4">You are on deck.</h4>
        <p>Sit tight while others try to answer this question:</p>

        <div class="swing-in-top-fwd jumbotron">            
            <h4 class="my-4">@CurrentQuestion.Question</h4>
            @if(!string.IsNullOrEmpty(CurrentQuestion.ImageUrl))
            {
                <div class="row">
                    <div class="col text-center">
                        <img src="@CurrentQuestion.ImageUrl" class="img-fluid img-question" />
                    </div>
                </div>
            }
        </div>        
    }

    @if (State == PlayState.CurrentPlayerAnswering)
    {
        <h4 class="mt-4">Click on a player then the answer they gave</h4>

        <AnswerPanel Players="ShuffledPlayers()" Answers="ShuffledAnswers()" CurrentPlayer="@Game.CurrentPlayer" SubmitAnswers="@((a) => SubmitQuestionCompleteAnswer(a))" Enabled="@true"></AnswerPanel>        
    }

    @if (State == PlayState.QuestionScores)
    {
        if (Player.Id != Game.CurrentPlayer.Id || Game.State == GameState.Ended)
        {
            var gamePlayer = Game.Players.First(x => x.Id == Player.Id);

            <ReactionResults Game="Game" Player="gamePlayer" Guess="CurrentGuess"></ReactionResults>   
            
            @if(Game.State == GameState.Ended || Game.State == GameState.Ending)
            {
                var score = Game.Players.FirstOrDefault(x => x.Id == Player.Id)?.Score ?? 0;
                var classes = "slide-in-blurred-bottom" + (Game.Winner()?.Id == Player.Id? " winning-player" : "");

                <div class="row slide-in-blurred-bottom">
                    <div class="col text-center">
                        <h4 class="my-2">
                            Game Over                
                        </h4>
                        <Scorecard Score="@score" Class="@classes">
                            @if(Game.Winner()?.Id == Player.Id)
                            {
                                <span class="trophy">@AnswerReaction.Trophy.ToEmoji()</span>
                            }
                        </Scorecard>   
                    </div>
                </div>
            }
        }
        else // you are the current player and just submitted scores
        {
            <h4 class="mt-4">Check the scoreboard to see how you did</h4>          

            @if(ShowCurrentPlayerTurnScore)
            {
                <h4 class="mt-4">You got @Game.CorrectAnswers().Count correct!</h4>
            }
        }
    }
        
    <div class="row">
        <div class="col h4">
            @StatusMessage
        </div>
    </div>
}
else 
{
    <LoadingMessage Message="Loading Game..."></LoadingMessage>
}

@code {
    private HubConnection hubConnection;

    [Parameter]
    public string Id { get; set; }
    public PlayerDto Player { get; set; }
    public string Answer { get; set; }
    public string StatusMessage { get; set; }
    public int? CurrentGuess { get; set; }
    public PlayState State { get; set; }

    public GameDto Game { get; set;}
    public bool PlayerIsCurrentPlayer => Game.Players.Any() && Game.CurrentPlayer?.Id == Player.Id && Game.State != GameState.Ended;
    public bool EveryoneHasAnswered => Game.CurrentAnswers().Count == Game.Players.Count(x => !x.OnDeck);
    public bool CurrentPlayerHasAnswered => Game.Questions.Any() && Game.CurrentAnswers().All(x => !string.IsNullOrEmpty(x.CurrentPlayerAnswer));

    public GameQuestionDto CurrentQuestion => Game.Questions.LastOrDefault();
    public bool ShowCurrentPlayerTurnScore { get; set; }
    
    private void UpdatePlayState()
    {
        var playerAnswer = Game.CurrentAnswers().FirstOrDefault(x => x.Player.Id == Player.Id);

        if (CurrentQuestion != null && !PlayerIsCurrentPlayer && playerAnswer == null && Game.State != GameState.PlayerChoosing)
        {
            Answer = "";
            CurrentGuess = null;
            State = PlayState.AnsweringQuestion;
            StatusMessage = "Type your answer and hit Submit";
        }
        else if (CurrentQuestion != null && !PlayerIsCurrentPlayer && playerAnswer != null)
        {
            State = PlayState.AnswerSubmitted;
            CurrentGuess = playerAnswer.Guess;
            StatusMessage = "";
        }
        else if (PlayerIsCurrentPlayer && !EveryoneHasAnswered)
        {
            Console.WriteLine("EveryoneHasAnswered? " + EveryoneHasAnswered);
            State = PlayState.CurrentPlayerWaiting;
            // StatusMessage = CurrentQuestion.Question; 
        }
        else if (PlayerIsCurrentPlayer && EveryoneHasAnswered && !CurrentPlayerHasAnswered)
        {
            State = PlayState.CurrentPlayerAnswering;
            StatusMessage = "";
        }
        else if (PlayerIsCurrentPlayer && EveryoneHasAnswered && CurrentPlayerHasAnswered)
        {
            State = PlayState.QuestionScores;
            Task.Run(async () => {
                await Task.Delay(3000);
                ShowCurrentPlayerTurnScore = true;
            });            
        }
        else if (Game.State == GameState.Ended)
        {
            Console.WriteLine("Game has eneded");
            StatusMessage = "";
        }
        else
        {
            Console.WriteLine("Woah, no conditions met?");
        }
        Console.WriteLine("State - " + State.ToString());
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        Player = await GetPlayerFromStorageAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/wordplayhub"))
            .Build();

        // subscribe to other things
        hubConnection.On<GameDto, GameQuestionDto, PlayerDto>("QuestionReady", (game, question, player) => {               
            // reset UI
            Game = game;
            UpdatePlayState();

            StateHasChanged();
        });

        hubConnection.On<GameDto, SpeechSynthesisUtterance>("AnswersFinished", (game, phrase) => {            
            StatusMessage = phrase.Text;
            Game = game;
            
            UpdatePlayState();

            if (game.CurrentPlayer.Id == Player.Id)
            {
                State = PlayState.CurrentPlayerAnswering;
            }
            StateHasChanged();
        });  
        
        hubConnection.On<PlayerDto, PlayerDto, AnswerReaction>("ReactionReceived", async (fromPlayer, toPlayer, reaction) => {   
            if (Player.Id == toPlayer.Id)
            {
                await js.InvokeVoidAsync("FloatItem", reaction.ToEmoji());                
            }            
        });

        hubConnection.On<bool, GameDto>("QuestionSummaryStarted", async (timeExpired, game) => {                        
            Game = game;
            StatusMessage = "";
            State = PlayState.QuestionScores;
            ShowCurrentPlayerTurnScore = false;
            StateHasChanged();


            await Task.Delay(Game.CurrentAnswers().Count * 1000);
            ShowCurrentPlayerTurnScore = true;
            StateHasChanged();
        });

        hubConnection.On<GameDto>("GameOver", (game) => {
            Game = game;            
            StateHasChanged();

            if (Game.Winner().Id == Player.Id)
            {                
                string[] sparks = new [] {"💕", "🎈", "🎇", "✨", "💩", "🏆"};
                
                BlazorTimer.SetTimer(15);
                BlazorTimer.OnElapsed += () => {
                    var random = new Random();
                    var icon = sparks[random.Next(1, sparks.Length)];            
                    js.InvokeVoidAsync("FloatItem", icon);     
                };                
            }
        }); 

        hubConnection.On<GameDto>("GameReset", (game) => {
            NavigationManager.NavigateTo("join");
        });
        
        hubConnection.On<GameDto>("PlayerUpdated", async (game) => {
            Game = game;

            var updatedPlayer = game.Players.FirstOrDefault(x => x.Id == Player.Id);

            if (Game == null || Game.State == GameState.Ended || Game.State == GameState.Lobby || updatedPlayer == null)
            {
                NavigationManager.NavigateTo("/join");
            }
            else
            {
                Player = updatedPlayer;
                Game = game;
                await SavePlayerToStorageAsync(Player);

                Console.WriteLine("~ Initialized state ~");
                UpdatePlayState();
            }
        });

        hubConnection.On<string>("ConnectionError", (message) => {
            Console.WriteLine("error - " + message);

            // clear game and send to Join?
            NavigationManager.NavigateTo("join");            
        });

        // start hub
        await hubConnection.StartAsync();
        
        await hubConnection.SendAsync("UpdatePlayerConnectionId", Id, Player.Id);
    }

    public async Task SubmitAnswer() 
    {
        if (!string.IsNullOrEmpty(Answer))
        {
            State = PlayState.AnswerSubmitted;        
            await hubConnection.SendAsync("AnswerQuestion", Game.Id, CurrentQuestion?.Id, Player.Id, Answer);   
            StatusMessage = "";     
            StateHasChanged();
        }        
    }

    public async Task SubmitQuestionGuessAsync(int guess)
    {
        // do something
        CurrentGuess = guess;
        await hubConnection.SendAsync("SubmitCorrectGuess", Game.Id, CurrentQuestion.Id, Player.Id, CurrentGuess.Value);        
    }

    public async Task OnAnswerReaction(ReactionDto reaction) // Player toPlayer, AnswerReaction reaction
    {
        if (Player.Id != reaction.Answer.Player.Id)
        {
            await hubConnection.SendAsync("SendReaction", Game.Id, Player, reaction.Answer.Player, reaction.Reaction);
        }        
    }

    public async Task SubmitQuestionCompleteAnswer(List<AnsweredQuestionDto> answers)
    {
        State = PlayState.QuestionScores;

        await hubConnection.SendAsync("QuestionCompletedAnswer", Game.Id, false, answers);
        
        StateHasChanged();
    }

    private async Task SavePlayerToStorageAsync(PlayerDto player)
    {
        await localStore.SetItemAsync<PlayerDto>("player", player); 
    }

    public async Task<PlayerDto> GetPlayerFromStorageAsync()
    {
        var playerExists = await localStore.ContainKeyAsync("player");
        if (playerExists)
        {
            var player = await localStore.GetItemAsync<PlayerDto>("player");

            return player;
        }
        
        throw new Exception("Player not found!");        
    }

    private List<PlayerDto> ShuffledPlayers()
    {
        var r = new Random();
        return Game.Players.Where(x => !x.OnDeck).OrderBy(x => r.Next()).ToList();
    }

    private List<AnsweredQuestionDto> ShuffledAnswers()
    {
        var r = new Random();
        return Game.CurrentAnswers().OrderBy(x => r.Next()).ToList();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();            
        }
    }
}