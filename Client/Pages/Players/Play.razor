@page "/play/{id}"
@inject HttpClient Http
@layout PlayerLayout
@using Microsoft.AspNetCore.SignalR.Client
@using Toolbelt.Blazor.SpeechSynthesis
@using ZoomersClient.Client.Components.Players
@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models
@using ZoomersClient.Shared.Models.Enums
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@implements IAsyncDisposable

@if(Game != null && Player != null && Game.CurrentPlayer != null)
{
    <div class="row">
        <div class="col-10 pt-2">
            <h1>@Game.Name</h1>
        </div>
        <div class="col-2 justify-content-end">
            <PlayerIconButton Icon="@Player.Icon" BackgroundColor="@Player.BackgroundColor" Class="rotate-in-center mt-2"></PlayerIconButton>
        </div>
    </div>    
    
    @if(State == PlayState.None)
    {
        <p>Could not determine game state.</p>
    }

    @if(State == PlayState.AnsweringQuestion)
    {        
        <div class="swing-in-top-fwd">
            
            <p class="h3">@CurrentQuestion.Question</p>

            <div class="row my-4">
                <div class="col">
                    <input @bind-value="Answer" class="form-control" />
                </div>
            </div>

            <div class="row my-4">
                <div class="col">
                    <button class="btn btn-success w-100 text-center" @onclick="SubmitAnswer">SUBMIT ANSWER</button>
                </div>
            </div>
        </div>
    }
    
    @if(State == PlayState.AnswerSubmitted)
    {
        <p>Congrats, your answer has been counted!</p>
        
        @foreach(var answer in Game.AnsweredQuestions)
        {
            <div class="row my-2">
                <div class="col-10 p-2 offset-1 bg-light">
                    @answer.Answer
                    @if(answer.Player.Id != Player.Id)
                    {
                        <span class="answer-send-hate" @onclick="@((e) => OnAnswerReaction(answer.Player, AnswerReaction.Hate))">ðŸ’©</span>

                        <span class="answer-send-love" @onclick="@((e) => OnAnswerReaction(answer.Player, AnswerReaction.Love))">ðŸ’•</span>
                    }
                </div>
            </div>
        }
        @if (Game.AnsweredQuestions.Count > 0)
        {
            <AnswersCorrectPanel MaxCount="@Game.AnsweredQuestions.Count" Username="@Game.CurrentPlayer.Username" OnSubmit="SubmitQuestionGuess"></AnswersCorrectPanel>
        }        
    }

    @if(State == PlayState.CurrentPlayerWaiting)
    {
        <p>Sit tight while others answer this question:</p>
    }

    @if (State == PlayState.CurrentPlayerAnswering)
    {
        <h4>@CurrentQuestion.Question</h4>

        <AnswerPanel Players="@Game.Players" Answers="@Game.AnsweredQuestions" CurrentPlayer="@Game.CurrentPlayer" SubmitAnswers="@((a) => SubmitQuestionCompleteAnswer(a))" Enabled="@true"></AnswerPanel>        
    }

    @if (State == PlayState.QuestionScores)
    {
        <p>Answers are in, check the main screen for scores!</p>
    }
    
    <div class="row">
        <div class="col h4">
            @StatusMessage
        </div>
    </div>
}
else 
{
    <LoadingMessage Message="Loading Game..."></LoadingMessage>
}

@code {
    private HubConnection hubConnection;

    [Parameter]
    public string Id { get; set; }
    public Player Player { get; set; }
    public string Answer { get; set; }
    public string StatusMessage { get; set; }
    public int CurrentGuess { get; set; }
    public PlayState State { get; set; }

    public Game Game { get; set;}
    public bool PlayerIsCurrentPlayer => Game.CurrentPlayer?.Id == Player.Id;
    public bool EveryoneHasAnswered => Game.AnsweredQuestions.Count() != Game.Players.Count();
    public QuestionBase CurrentQuestion => Game.Questions.LastOrDefault();
    

    private void UpdatePlayState()
    {
        var playerAnswer = Game.AnsweredQuestions.FirstOrDefault(x => x.Player.Id == Player.Id);

        if (CurrentQuestion != null && !PlayerIsCurrentPlayer && playerAnswer == null)
        {
            Answer = "";
            CurrentGuess = 0;
            State = PlayState.AnsweringQuestion;
            StatusMessage = "Type your answer and hit Submit";
        }
        else if (CurrentQuestion != null && !PlayerIsCurrentPlayer && playerAnswer != null)
        {
            State = PlayState.AnswerSubmitted;
            StatusMessage = "";
        }
        else if (PlayerIsCurrentPlayer && EveryoneHasAnswered)
        {
            State = PlayState.CurrentPlayerWaiting;
            StatusMessage = "Match the players to their answers"; 
        }
        else if (PlayerIsCurrentPlayer)
        {
            State = PlayState.CurrentPlayerAnswering;
            StatusMessage = "You are on the spot, what ya got?";
        }
        // Console.WriteLine("State - " + State.ToString());
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Game = await Http.GetFromJsonAsync<Game>($"Games/{Id}");
        
        Player = await GetPlayerFromStorageAsync();

        if (Game == null || Game.State == GameState.Ended || Game.State == GameState.Lobby)
        {
            NavigationManager.NavigateTo("/join");
        }
        else
        {
            Console.WriteLine("~ Initialized state ~");
            UpdatePlayState();
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/{Game.GameType}hub"))
            .Build();

        // subscribe to other things
        hubConnection.On<Game, WordPlayQuestion, Player>("QuestionReady", (game, question, player) => {               
            // reset UI
            Game = game;
            
            UpdatePlayState();

            StateHasChanged();
        });

        hubConnection.On<Game, SpeechSynthesisUtterance>("AnswersFinished", (game, phrase) => {            
            StatusMessage = phrase.Text;
            Game = game;
            
            UpdatePlayState();

            if (game.CurrentPlayer.Id == Player.Id)
            {
                State = PlayState.CurrentPlayerAnswering;
            }
            StateHasChanged();
        });  
        
        hubConnection.On<Player, Player, AnswerReaction>("ReactionReceived", async (fromPlayer, toPlayer, reaction) => {   
            if (Player.Id == toPlayer.Id)
            {
                await js.InvokeVoidAsync("FloatItem", reaction.ToString());                
            }            
        });

        hubConnection.On<bool, List<AnsweredQuestion>>("QuestionSummaryStarted", (timeExpired, currentPlayerAnswers) => {                        
            StatusMessage = "";
            State = PlayState.QuestionScores;
            StateHasChanged();
        });

        hubConnection.On<Game>("GameOver", (game) => {
            StatusMessage = "Game Over. Score is " + game.Players.FirstOrDefault(x => x.Id == Player.Id)?.Score;
            StateHasChanged();
        }); 

        hubConnection.On<Game>("ResetGame", (game) => {
            NavigationManager.NavigateTo("join");
        }); 

        // start hub
        await hubConnection.StartAsync();
        
        await hubConnection.SendAsync("UpdateConnectionId", Player.Id);
    }

    public async Task SubmitAnswer() {
        State = PlayState.AnswerSubmitted;        
        await hubConnection.SendAsync("AnswerQuestion", Game.Id, CurrentQuestion?.Id, Player.Id, Answer);   
        // todo: move this UpdateState? or add a hook to do so though hub
        StatusMessage = "";     
        StateHasChanged();
    }

    public void SubmitQuestionGuess(int guess)
    {
        // do something
        CurrentGuess = guess;
        Console.WriteLine("Guess - " + guess);
    }

    public async Task OnAnswerReaction(Player toPlayer, AnswerReaction reaction)
    {
        if (Player.Id != toPlayer.Id)
        {
            await hubConnection.SendAsync("SendReaction", Game.Id, Player, toPlayer, reaction);
        }        
        //    await js.InvokeVoidAsync("PlayAudioFile", $"/sounds/{Player.Sound}.mp3");        
    }

    public async Task SubmitQuestionCompleteAnswer(List<AnsweredQuestion> CurrentPlayerAnswers)
    {
        // QuestionCompleteAnswerSubmitted = true;
        // ShowQuestionCompletePhase = false;
        State = PlayState.QuestionScores;

        await hubConnection.SendAsync("QuestionCompletedAnswer", Game.Id, false, CurrentPlayerAnswers);
        
        Console.WriteLine("Question Complete Submitted");
        StateHasChanged();
    }

    public async Task<Player> GetPlayerFromStorageAsync()
    {
        var playerExists = await localStore.ContainKeyAsync("player");
        if (playerExists)
        {
            var player = await localStore.GetItemAsync<Player>("player");

            return player;
        }
        
        throw new Exception("Player not found!");        
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();            
        }
    }
}