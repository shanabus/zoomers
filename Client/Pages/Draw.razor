@page "/draw"
@layout PlayerLayout
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.RegularExpressions
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime js

<div class="row my-4">
    @foreach(var c in _colors)
    {
    <div class="col-2 text-center">
        <button @onclick='@(e => SetColor(c))' style="background-color: @c;" class="btn btn-lg"></button>
    </div>
    }    
</div>

<div style="width: 340px; margin: 10px auto;" @ref="container" @ontouchmove="TouchMoveCanvasAsync" @ontouchend="TouchEndCanvasAsync" @ontouchstart="TouchStartCanvasAsync"
  @onmousemove="MouseMoveCanvasAsync" @onmouseup="MouseUpCanvas" @onmousedown="MouseDownCanvas">
    <BECanvas Width="340" Height="420" @ref="_canvasReference" ></BECanvas>
</div>

<div class="row my-4">
    @foreach(var s in _sizes)
    {
    <div class="col-3 text-center">
        <button @onclick='@(e => SetSize(s))' class="btn btn-lg"><span class="dot" style="width: @(s * 5)px; height: @(s * 5)px;"></span></button>
    </div>
    }    
</div>
<div class="row">
    <div class="col">
        <button @onclick="ToImage" class="btn btn-info">Export</button>
        <img src="@Src" />
    </div>
</div>
<style>
    html,
    body {
        overscroll-behavior-y: contain;
    }
    .dot {
        background-color: #bbb;
        border-radius: 50%;
        display: inline-block;
    }
    canvas {
        border: 2px solid #666;
    }
</style>

@code {
    private Canvas2DContext _context;
    private string[] _colors = new string[] {"black","blue","green","yellow","orange","red"};
    private int[] _sizes = new int[] { 1, 3, 5, 8};

    protected BECanvasComponent _canvasReference;
    
    private ElementReference container;
    private double canvasx;
    private double canvasy;
    private double last_mousex;
    private double last_mousey;
    private double mousex;
    private double mousey;
    private bool mousedown = false;
    private string clr = "black";
    private float penSize = 3;
    private string Src = "";

    private HubConnection hubConnection;
    
    private class Position
    {
        public double Left { get; set; }
        public double Top { get; set; }
    }
    private void SetColor(string color)
    {
        clr = color;
    }

    private void SetSize(float size)
    {        
        penSize = size;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/drawhub"))
            .Build();

        hubConnection.On<double, double, double, double, string, float>("UpdateImage", async (p_x, p_y, xX, yY, color, size) => {
            await DrawCanvasAsync(p_x, p_y, xX, yY, color, size);
        });
            
        // start hub
        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _context = await _canvasReference.CreateCanvas2DAsync();
            // initialize settings
            // await _context.GlobalCompositeOperationAsync(CompositeOperation.Source_Over);
            
            await _context.SetLineJoinAsync(LineJoin.Round);
            await _context.SetLineCapAsync(LineCap.Round);
            // this retrieves the top left corner of the canvas container (which is equivalent to the top left corner of the canvas, as we don't have any margins / padding)
            var p = await js.InvokeAsync<Position>("eval", $"let e = document.querySelector('[_bl_{container.Id}=\"\"]'); e = e.getBoundingClientRect(); e = {{ 'Left': e.x, 'Top': e.y }}; e");
            (canvasx, canvasy) = (p.Left, p.Top);
        }
    }

    private void MouseDownCanvas(MouseEventArgs e)
    {
        render_required = false;
        this.last_mousex = mousex = e.ClientX - canvasx;
        this.last_mousey = mousey = e.ClientY - canvasy;
        this.mousedown = true;
    }

    private void MouseUpCanvas(MouseEventArgs e)
    {
        render_required = false;
        mousedown = false;
    }

    async Task MouseMoveCanvasAsync(MouseEventArgs e)
    {
        render_required = false;
        if (!mousedown)
        {
            return;
        }
        mousex = e.ClientX - canvasx;
        mousey = e.ClientY - canvasy;
        await DrawCanvasAsync(mousex, mousey, last_mousex, last_mousey, clr, penSize);
        
        await hubConnection.SendAsync("DrawImage", mousex, mousey, last_mousex, last_mousey, clr, penSize);

        last_mousex = mousex;
        last_mousey = mousey;
    }

    private void TouchStartCanvasAsync(TouchEventArgs e)
    {
        render_required = false;
        this.last_mousex = mousex = e.Touches.First().ClientX - canvasx;
        this.last_mousey = mousey = e.Touches.First().ClientY - canvasy;
        this.mousedown = true;
    }

    private void TouchEndCanvasAsync(TouchEventArgs e)
    {
        render_required = false;
        mousedown = false;
    }

    private async Task TouchMoveCanvasAsync(TouchEventArgs e)
    {
        render_required = false;
        if (!mousedown)
        {
            return;
        }
        mousex = e.Touches.First().ClientX - canvasx;
        mousey = e.Touches.First().ClientY - canvasy;
        await DrawCanvasAsync(mousex, mousey, last_mousex, last_mousey, clr, penSize);
        
        await hubConnection.SendAsync("DrawImage", mousex, mousey, last_mousex, last_mousey, clr, penSize);

        last_mousex = mousex;
        last_mousey = mousey;
    }

    async Task DrawCanvasAsync(double prev_x, double prev_y, double x, double y, string clr, float size)
    {
        //await using (var ctx2 = await _context.CreateBatchAsync())
        //{
            await _context.BeginBatchAsync();

            await _context.SetStrokeStyleAsync(clr);
            await _context.SetLineWidthAsync(size);
            await _context.BeginPathAsync();
            await _context.MoveToAsync(prev_x, prev_y);
            await _context.LineToAsync(x, y);
            await _context.StrokeAsync();

            await _context.EndBatchAsync();
        //}

    }
    private bool render_required = true;
    protected override bool ShouldRender()
    {
        if (!render_required)
        {
            render_required = true;
            return false;
        }
        return base.ShouldRender();
    }

    private async Task ToImage()
    {        
        var p = await js.InvokeAsync<string>("eval", $"let e = document.querySelector('canvas'); e = e.toDataURL() + ''; e");
        Src = p;
        //var file = await js.InvokeAsync<object>("DataURLtoBlob", p);
        
        var chunks = p.Split(',');        
        Console.WriteLine("chunks zero - " + chunks[0]);

        var regex = new Regex(@"data:(.*?);base64"); // didn't work - "/:(.*?);/"
        var match = regex.Match(chunks[0]);
        if (match.Success)
        {
            Console.WriteLine(match.Groups.Count);
            var mime = match.Groups[1].Value;
            Console.WriteLine("mime - " + mime);        
        }
        else {
            Console.WriteLine("no match on mime");
        }

        string base64Decoded;
        byte[] data = System.Convert.FromBase64String(chunks[1]);
        base64Decoded = System.Text.ASCIIEncoding.ASCII.GetString(data);

        var content = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("dataUrl", base64Decoded)
        });
        await Http.PostAsync("Draw", content);

        // Console.WriteLine(base64Decoded);

        // await hubConnection.SendAsync("UploadImage", base64Decoded);
    }

    //var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
    //           bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
    //       while(n--){
    //           u8arr[n] = bstr.charCodeAt(n);
     
}