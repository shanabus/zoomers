@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models
@using ZoomersClient.Shared.Models.DTOs


<div class="row">
@foreach(var playerAnswer in CurrentPlayerAnswers)
{    
    <div class="col-6">
        <PlayerAnswerButton Player="playerAnswer.Player" Answer="playerAnswer" Selected="@(playerAnswer.Player == SelectedPlayer)" OnClickButton="OnClickPlayer">
            @playerAnswer.Answer
        </PlayerAnswerButton>
    </div>
}
</div>
<hr class="my-2">

<div class="row">
@foreach(var answer in Answers)
{
    var answerIsUsed = CurrentPlayerAnswers.Any(x => x.Answer == answer.Answer);

    <div class='col-6 my-1 answer-panel__answer @(answerIsUsed? "text-secondary" : "text-dark")' @onclick="@((e) => OnClickSelectAnswer(e, answer))">
        <div class="bg-light p-2">
            @answer.Answer
            <div class="answer-panel__answer-icon">
                @if(answerIsUsed)
                {
                    <span class='oi oi-check text-info'></span>
                }
                else
                {
                    <span class='oi oi-circle-check @((SelectedAnswer == answer)? "text-success" : "text-secondary")'></span>
                }            
            </div>
        </div>
        
    </div>
}
</div>

<div class="row my-4">
    <div class="col">
        <button class="btn btn-success w-100 text-center" @onclick="SubmitPlayerAnswers" disabled="@(!Enabled || !Valid)">SUBMIT ANSWERS</button>
    </div>
</div>


@code {
    [Parameter]
    public List<Player> Players { get; set; }

    public Player SelectedPlayer { get; set; }
    public AnsweredQuestion SelectedAnswer { get; set; }

    [Parameter]
    public bool Enabled { get; set; }
    public bool Valid => CurrentPlayerAnswers.All(x => !string.IsNullOrEmpty(x.Answer));

    [Parameter]
    public List<AnsweredQuestion> Answers { get; set; }
    
    public List<AnsweredQuestion> CurrentPlayerAnswers { get; set; }
        
    [Parameter]
    public EventCallback<List<AnsweredQuestion>> SubmitAnswers { get; set; }

    [Parameter]
    public Player CurrentPlayer { get; set; }

    private Timer answerTimerRef { get; set; }

    protected override void OnInitialized()
    {        
        CurrentPlayerAnswers = new List<AnsweredQuestion>();
    }

    protected override void OnParametersSet()
    {
        base.OnInitialized();

        var rand = new Random();

        CurrentPlayerAnswers = Answers.Where(x => x.Player.Id != CurrentPlayer.Id)
            .OrderBy(x => rand.Next())
            .Select(x => new AnsweredQuestion() { Question = x.Question, Answer = "", Player = x.Player })
            .ToList();   
    }

    public void OnClickPlayer(Player player)
    {
        SelectedPlayer = SelectedPlayer == player? null : player;
        CheckAnswer();
    }

    public void OnClickSelectAnswer(MouseEventArgs eventArgs, AnsweredQuestion answer){
        SelectedAnswer = answer;
        CheckAnswer();
    }

    public void CheckAnswer()
    {
        if (SelectedPlayer != null && SelectedAnswer != null)
        {
            var playerAnswer = CurrentPlayerAnswers.FirstOrDefault(x => x.Player == SelectedPlayer);
            if (playerAnswer != null){
                playerAnswer.Answer = SelectedAnswer.Answer;
            }
            SelectedPlayer = null;
            SelectedAnswer = null;
            StateHasChanged();
        }
    }

    public async Task SubmitPlayerAnswers()
    {
        Console.WriteLine("SubmitPlayerAnswers enabled = " + Enabled);

        // shouldn't have to check this but time ellapsed was firing
        if (Enabled)
        {
            await SubmitAnswers.InvokeAsync(CurrentPlayerAnswers);            
        }        
    }
}