@page "/join"
@layout PlayerLayout
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Toolbelt.Blazor.SpeechSynthesis
@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models.DTOs
@using ZoomersClient.Shared.Models.Enums
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime js

@if(State == LobbyState.CreatingPlayer)
{
    <h2 class="mt-2">Create a player</h2>

    <div class="row mb-4 mt-2">
        <div class="col-8">
            <div class="input-group input-group-lg">               
                <form @onsubmit="(e => ConnectToParty())">
                    <input placeholder="Player name" maxlength="25" type="text" class="form-control" @bind="Username" />                
                    <div class="input-group-append">
                        <span class="input-group-text" id="inputGroup-sizing-lg" @onclick="RandomPlayer">
                            <span class="oi oi-loop-square" aria-hidden="true"></span>
                        </span>
                    </div>
                </form> 
            </div>
        </div>
        <div class="col-4 text-center">            
            <PlayerIconButton Icon="@ChosenIcon" BackgroundColor="@BackgroundColor" />
        </div>
    </div>

    <hr class="my-4" />

    <div class="row">
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Dragon" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Dragon))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Alien" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Alien))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Vampire" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Vampire))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.PalmTree" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.PalmTree))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Tornado" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Tornado))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Mermaid" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Mermaid))" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Spider" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Spider))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Ghost" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Ghost))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Elephant" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Elephant))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Turtle" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Turtle))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Wizard" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Wizard))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Octopus" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Octopus))" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Poop" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Poop))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Robot" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Robot))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Cook" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Cook))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Elf" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Elf))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Devil" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Devil))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Skull" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Skull))" />
        </div>
    </div>

    <hr class="my-4" />

    int colorIndex = 0;

    @for(var row = 0; row < 3; row++)
    {        
    <div class="row my-2">
        @for(var col = 0; col < 6; col++)
        {            
            var color = PlayerColors[colorIndex];

            <div class="col-2">
                <button class="btn w-100" style="background-color: @color; border: 1px solid #eee;" @onclick="@(e => ClickChooseBackgroundColor(e, color))">&nbsp;</button>
            </div>

            colorIndex++;
        }        
    </div>
    }
        
    <div class="row mt-4">
        <div class="col">
            <button class="btn btn-success w-100" @onclick="(e => ConnectToParty())" disabled="@(!IsConnected || !PlayerIsValid)">CONNECT TO PARTY</button>
        </div>
    </div>
}

@if(State == LobbyState.SelectingParty)
{
    <h2 class="mt-2">Enter Party Code:</h2>

    <div class="row">
        <div class="col-4">
            <PartyButton Icon="@Party[0]" Class="@IsSelected(0)" OnClickCallback="@(e => ClickRemovePartyIcon(e, 0))"></PartyButton>
        </div>
        <div class="col-4">
            <PartyButton Icon="@Party[1]" Class="@IsSelected(1)" OnClickCallback="@(e => ClickRemovePartyIcon(e, 1))"></PartyButton>         
        </div>
        <div class="col-4">
            <PartyButton Icon="@Party[2]" Class="@IsSelected(2)" OnClickCallback="@(e => ClickRemovePartyIcon(e, 2))"></PartyButton>
        </div>
    </div>

    <hr class="my-3" />

    <div class="row">
        <div class="col-4">                  
            <PartyButton Icon="PartyIcon.Girl" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Girl))"></PartyButton>
        </div>
        <div class="col-4">
            <PartyButton Icon="PartyIcon.Boy" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Boy))"></PartyButton>         
        </div>
        <div class="col-4">
            <PartyButton Icon="PartyIcon.Grandma" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Grandma))"></PartyButton>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-4">
            <PartyButton Icon="PartyIcon.Scientist" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Scientist))"></PartyButton>            
        </div>
        <div class="col-4">
            <PartyButton Icon="PartyIcon.Cat" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Cat))"></PartyButton>          
        </div>
        <div class="col-4">
            <PartyButton Icon="PartyIcon.Grandpa" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Grandpa))"></PartyButton>          
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-4">
            <PartyButton Icon="PartyIcon.Dog" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Dog))"></PartyButton>         
        </div>
        <div class="col-4">
            <PartyButton Icon="PartyIcon.Zombie" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Zombie))"></PartyButton>
        </div>
        <div class="col-4">
            <PartyButton Icon="PartyIcon.Family" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Family))"></PartyButton>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col">
            <button class="btn btn-success w-100" @onclick="(e => JoinTheGame())" disabled="@(!IsConnected || !PartyIsValid)">JOIN PARTY</button>
        </div>
    </div>

    @if(Player != null)
    {
        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-outline-secondary w-100" @onclick="EditPlayer">EDIT PLAYER</button>
            </div>
        </div>
    }
}

@if(State == LobbyState.ConnectedToGame)
{
    <div class="row">
        <div class="col text-center my-2">
            <h1 class="game-name swing-in-top-fwd">@Game.Name</h1>
        </div>
    </div>    

    <h3>In game:</h3>

    foreach(var player in Game.Players)
    {
        <div class="row">
            <div class="col">
                <PlayerBadge Player="@player"></PlayerBadge>            
            </div>
        </div>
    }

    @if(ShowStartButton)
    {
        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-lg btn-primary w-100" @onclick="(e => StartGame())" disabled="@(!IsConnected)">START GAME</button>
            </div>
        </div>
    }
}

<div class="row mt-4">
    <div class="col">
        <label>@GameStatus</label>
    </div>
</div>

@code {
    
    private HubConnection hubConnection;

    public string Username { get; set;}
    public LobbyState State { get; set; }
    public PlayerIcon ChosenIcon { get; set; }
    public string BackgroundColor { get; set;}
    public PlayerDto Player { get; set; }
    public bool PlayerIsValid => !string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(BackgroundColor) && ChosenIcon != PlayerIcon.None;

    public List<PartyIcon> Party { get; set;}
    public int IconIndex { get; set;}
    public bool PartyIsValid => Party.All(x => x != PartyIcon.None);
    public string[] PlayerColors => new string[] {
        "rgb(0,0,0)", // 42   // 126.5
        "rgb(42,42,0)",
        "rgb(100,0,0)",
        "rgb(170,0,0)",
        "rgb(215,10,0)",
        "rgb(255,50,0)",
        
        "rgb(150,50,0)",
        "rgb(180,90,0)",
        "rgb(210,130,42)",
        "rgb(240,170,80)",
        "rgb(20,135,68)",
        "rgb(37,178,96)",

        "rgb(109,219,177)", 
        "rgb(110,220,215)", 
        "rgb(20,80,221)", 
        "rgb(64,100,229)",
        "rgb(109,142,219)", 
        "rgb(255,255,255)"
    };
    
    public string GameStatus { get; set;}
    public GameDto Game { get; set; }
    
    public bool ShowStartButton => Game != null && Game.HasEnoughPlayers() && Game.Players.First().Id == Player.Id;

    protected override async Task OnInitializedAsync()
    {
        Party = new List<PartyIcon>();
        Party.Add(PartyIcon.None);
        Party.Add(PartyIcon.None);
        Party.Add(PartyIcon.None);

        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        GameStatus = "Loading player and checking game";

        // subscribe to other things
        hubConnection.On<GameDto, PlayerDto>("PlayerJoined", async (game, player) => {
            Console.WriteLine("PlayerJoined");
            Player = player;
            Game = game;
            GameStatus = $"Welcome to {game.Name} - Waiting for others to start...";
            State = LobbyState.ConnectedToGame;
            await SavePlayerToStorageAsync(player);
            await SaveGameToStorageAsync(game.Id);

            await js.InvokeVoidAsync("PlayAudioFile", $"/sounds/{Player.Sound}.mp3");

            StateHasChanged();
        });

        hubConnection.On<GameDto, PlayerDto, SpeechSynthesisUtterance>("PlayersUpdated", (game, player, phrase) =>
        {            
            Game = game;
            // StateHasChanged();
        });

        hubConnection.On<string>("PlayerJoinedError", (message) => {
            GameStatus = $"Error joining - {message}";
            StateHasChanged();
        });

        hubConnection.On<GameDto>("ReadyToStartGame", (game) => {
            Console.WriteLine("ReadyToStartGame");
            Game = game;
            StateHasChanged();
        });

        hubConnection.On<Guid>("GameStarted", (id) => {
            Console.WriteLine("GameStarted");
            NavigationManager.NavigateTo($"play/{id}", true);
            StateHasChanged();
        });

        hubConnection.On<string>("LobbyIsFull", (username) => {
            GameStatus = $"Sorry, {username}.  The lobby is full.";
            StateHasChanged();
        });

        // start hub
        await hubConnection.StartAsync();

        // load previous user from Username / cookies
        await CheckExistingPlayerAndGame();
    }

    private void ConnectToParty()
    {
        GameStatus = "Enter a valid code";
        State = LobbyState.SelectingParty;
        StateHasChanged();
    }

    private string IsSelected(int index)
    {
        if (IconIndex == index && Party.Any(x => x == PartyIcon.None))
        {
            return "selected";
        }
        return "";
    }

    private void EditPlayer()
    {
        State = LobbyState.CreatingPlayer;
        StateHasChanged();
    }

    private void RandomPlayer()
    {
        Random random = new Random();
        Type type = typeof(PlayerIcon);

        Array values = type.GetEnumValues();
        int index = random.Next(values.Length - 1); // we plus/minus to avoid PlayerIcon.None
        ChosenIcon = (PlayerIcon)values.GetValue(index + 1);

        BackgroundColor = PlayerColors[random.Next(PlayerColors.Length)];

        Username = NameHelper.GetRandomName();

        var oldId = Player?.Id ?? Guid.NewGuid();

        Player = new PlayerDto() {
            Id = oldId,
            Username = Username,
            BackgroundColor = BackgroundColor,
            Icon = ChosenIcon
        };

        StateHasChanged();
    }

    private void ClickPlayerIcon(MouseEventArgs eventArgs, PlayerIcon icon)
    {
        ChosenIcon = icon;
        StateHasChanged();
    }

    private void ClickChooseBackgroundColor(MouseEventArgs eventArgs, string color)
    {
        BackgroundColor = color;
        StateHasChanged();
    }

    private void ClickPartyIcon(MouseEventArgs e, PartyIcon icon) 
    {        
        Party[IconIndex] = icon;
        IconIndex = (IconIndex + 1) % 3;
        StateHasChanged();
    }

    private void ClickRemovePartyIcon(MouseEventArgs eventArgs, int index)
    {
        Party[index] = PartyIcon.None;
        IconIndex = index;
        StateHasChanged();
    }  

    private async Task JoinTheGame()
    {
        GameStatus = "Checking game servers";

        var sounds = new string[] { "ku_chung", "ooh_wop", "whistle_hilo", "whistle_lohi", "shu_thoo", "ka_ka_ka", "answer_in", "fart" };
        var r = new Random();
        
        Player.Sound = sounds[r.Next(sounds.Length)];

        await hubConnection.SendAsync("JoinTheGame", Party.Select(x => x.ToString()), Player);

        GameStatus = "Waiting for response...";
        
        StateHasChanged();
    }

    private async Task CheckExistingPlayerAndGame()
    {
        try
        {
            Console.WriteLine("Checking player in storage");
            Player = await GetPlayerFromStorageAsync();
        }
        catch(Exception e)
        {
            Console.WriteLine("No player found " + e.Message);
        }

        if (Player == null)
        {
            Console.WriteLine("Generating a random player");
            RandomPlayer();
            State = LobbyState.CreatingPlayer;
            GameStatus = "";
        }        
        else
        {
            Username = Player.Username;
            BackgroundColor = Player.BackgroundColor;
            ChosenIcon = Player.Icon;

            Console.WriteLine("Player found, checking for an existing game");
            try
            {
                var gameId = await GetGameFromStorageAsync();
                Game = await Http.GetFromJsonAsync<GameDto>($"Games/{gameId}");
                
                if (Game == null || Game.State == GameState.Ended || !Game.Players.Any())
                {
                    Console.WriteLine("Game is null or has Ended");
                    GameStatus = "Found a game but its over, enter a new code";
                    State = LobbyState.SelectingParty;
                }
                else if (Game.State != GameState.Lobby && Game.Players.Any(x => x.Id == Player.Id))
                {
                    Console.WriteLine("Game has started or is being played, will try to catch up!");
                    // Console.WriteLine("Would normally navigate, checking null players tho");
                    NavigationManager.NavigateTo($"play/{Game.Id}");
                }
                else if (Game.State == GameState.Lobby)
                {   
                    if (Game.Players.Any(x => x.Id == Player.Id))
                    {
                        Console.WriteLine("Game looks valid, should be in lobby");                        
                        GameStatus = "Reconnected to game";
                        State = LobbyState.ConnectedToGame;
                    }
                    else {
                        var partyIcons = Game.Party.Split("|").ToList();

                        Console.WriteLine("Game looks valid, need to rejoin with party code " + string.Join(',', partyIcons));
                        GameStatus = "Found a game the lobby is empty, enter a new code";
                        await hubConnection.SendAsync("JoinTheGame", partyIcons, Player);
                        State = LobbyState.SelectingParty;
                    }
                }
            }
            catch(Exception e)
            {
                State = LobbyState.SelectingParty;
                Console.WriteLine("Exception: " + e.Message);
            }            
        }
        
        StateHasChanged();
    }

    private async Task SavePlayerToStorageAsync(PlayerDto player)
    {
        await localStore.ClearAsync();
        await localStore.SetItemAsync<PlayerDto>("player", player);
    }

    private async Task SaveGameToStorageAsync(Guid gameId)
    {
        await localStore.SetItemAsync<Guid>("gameId", gameId);
    }

    public async Task<PlayerDto> GetPlayerFromStorageAsync()
    {
        var playerExists = await localStore.ContainKeyAsync("player");
        
        if (playerExists)
        {
            var player = await localStore.GetItemAsync<PlayerDto>("player");

            return player;
        } 

        throw new Exception("Player does not exist, create a random one");
    }

    public async Task<Guid> GetGameFromStorageAsync()
    {
        var gameIdExists = await localStore.ContainKeyAsync("gameId");
        if (gameIdExists)
        {
            var id = await localStore.GetItemAsync<Guid>("gameId");
            return id;
        }            
        
        throw new Exception("Game Id not found!");   
    }
    
    private async Task StartGame() => await hubConnection.SendAsync("StartGame", Game.Id);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
    
    
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

}