@page "/game/{id}"
@layout GameLayout
@inject HttpClient Http
@using ZoomersClient.Shared.Models
@using ZoomersClient.Client.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ZoomersClient.Shared.Services.GameService GameService
@using Toolbelt.Blazor.SpeechSynthesis
@inject SpeechSynthesis SpeechSynthesis

@if (Game != null)
{
    <div class="row">
        <div class="col-sm-6">
            <h1>Game Name: <u>@Game.Name</u></h1>

            <h2>Players in Lobby @Game.Players.Count()</h2>
            <div class="row" id="player-lobby">
                @foreach (var player in Game.Players)
                {
                    <div class="col-4 player-badge mt-4">
                        <div style="background-color: @player.BackgroundColor">
                            <PlayerIconButton Icon="@player.Icon"></PlayerIconButton>
                        </div>
                        <span>@player.Username</span>                        
                    </div>
                }
            </div>
        </div>
        <div class="col-sm-6 text-right" id="game-party-icons">
            <div id="party-connect">
            @foreach (var icon in Game.Party)
            {
                <PartyButton Icon="icon" />
            }
                <br />
                <div class="ml-4">
                    <img src="@(NavigationManager.BaseUri)Games/@Id/qrcode" />
                </div>
            </div>
        </div>
    </div>
    
    @if(Game.Players.Count() >= 3)
    {
        <div class="row mt-4">
            <div class="col mt-4">
                <h3>Hey <u>@Game.Players.First().Username</u>, press 'Start' when everybody is in</h3>
            </div>
        </div>
    }
}
else
{
    <LoadingMessage Message="Loading Game..." />
}

@code {
    [Parameter]
    public string Id { get; set; }

    public Game Game { get; set; }

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Game = await Http.GetFromJsonAsync<Game>($"Games/{Id}");
        
        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        // subscribe to other things
        hubConnection.On<Game, Player>("PlayersUpdated", (game, player) =>
        {            
            Game = game;
            StateHasChanged();

            IntroducePlayer(player);
        });

        hubConnection.On<Game>("GameStarted", (id) =>
        {            
            //Game = game;
            //StateHasChanged();
        });

        // start hub
        await hubConnection.StartAsync();

        await hubConnection.SendAsync("Subscribe", Id);
    }

    private void IntroducePlayer(Player player)
    {
        var utterancet = new SpeechSynthesisUtterance {
            Text = GetRandomWelcome(player.Username),
            Lang = Game.Voice, // BCP 47 language tag
            Pitch = 1.0, // 0.0 ~ 2.0 (Default 1.0)
            Rate = 1.0, // 0.1 ~ 10.0 (Default 1.0)
            Volume = 1.0 // 0.0 ~ 1.0 (Default 1.0)
        };
        this.SpeechSynthesis.Speak(utterancet); 
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }


    public string GetRandomWelcome(string username)
    {
        var phrases = new string[] {
            "Holy Smoke! We are playing with __USER__",
            "Well look who showed up, its __USER__",
            "__USER__ has joined the gang",
            "Let us acknowledge that __USER__ is among us",
            "Alrigh, my friend __USER__ has joined the lobby",
            "Let us welcome __USER__ to the lobby"
        };
        var random = new Random();
        var message = phrases[random.Next(phrases.Length)].Replace("__USER__", username);

        return message;
    }
}
