@inject HttpClient Http
@using ZoomersClient.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ZoomersClient.Shared.Services.GameService GameService
@using Toolbelt.Blazor.SpeechSynthesis
@inject SpeechSynthesis SpeechSynthesis

@if (Game != null)
{
    <div class="row">
        <div class="col">            
            @if(CurrentQuestion != null)
            {
                <div class="jumbotron swing-in-top-fwd" id="current-question">
                    @CurrentQuestion.Question
                </div>
            }         

            @if(CurrentPlayer != null)
            {
                <PlayerIconButton Icon="CurrentPlayer.Icon"></PlayerIconButton>
            }
        </div>
    </div>    
    <div class="row my-4">
        <div class="col">
            <h3>@(StatusMessage)</h3>
        </div>
    </div>

    @if(PlayersAnswered.Any())
    {
        <div class="row">
        @foreach(var player in PlayersAnswered)
        {
            <div class="col">
                <PlayerBadge Player="@player" Class="my-4"></PlayerBadge>
            </div>
        }
        </div>
    }
}

@code {

    [Parameter]
    public Game Game { get; set; }
    public Player CurrentPlayer { get; set; }
    public string StatusMessage { get; set; }
    public WordPlayQuestion CurrentQuestion { get; set; }
    public List<Player> PlayersAnswered { get; set; }
    
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        PlayersAnswered = new List<Player>();
        
        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/{Game.GameType}hub"))
            .Build();

        // subscribe to other things
        hubConnection.On<Player>("PlayerConnected", (player) =>
        {               
            
            Console.WriteLine(player.Username + " you are first!");
            StatusMessage = player.Username + " is first so they won't need to answer this one";
            StateHasChanged();
        });

        hubConnection.On<WordPlayQuestion>("QuestionReady", async (question) =>
        {               
            CurrentQuestion = question;
            StateHasChanged();

            Console.WriteLine(question.Question);
            await SpeakPhrase(question.Question);
        });

        hubConnection.On<Player>("QuestionAnswered", async (player) => {
            Console.WriteLine("A person answered a question! " + player.Username);
            PlayersAnswered.Add(player);

            if (PlayersAnswered.Count == Game.Players.Count - 1)
            {
                StatusMessage = "I think everybody has answered, know we'll let " + CurrentPlayer.Username + " guess who said what";
                await SpeakPhrase(StatusMessage);
            }

            StateHasChanged();
        });

        // start hub
        await hubConnection.StartAsync();

        Console.WriteLine("Bout to ask a q");
        
        // ask first question
        await hubConnection.SendAsync("AskQuestion", Game.Id);

        // await hubConnection.SendAsync("Subscribe", Id);
    }

    private async Task SpeakPhrase(string message)
    {
        // await FakeButton.FocusAsync();

        if (this.SpeechSynthesis.Speaking)
        {
            this.SpeechSynthesis.Cancel();
        }
        
        this.SpeechSynthesis.Speak(new SpeechSynthesisUtterance() {
            Lang = Game.Voice,
            Text = message
        });
    }
    
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }    
}
