@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="row form-inline">
    <div class="col-sm-12 col-md-6">
        <div class="form-group">
            <label>
                User:
                <input @bind="userInput" class="form-control mx-2" />                
            </label>
        </div>
    </div>
    <div class="col-sm-12 col-md-6">
        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" class="form-control mx-2" />
                <button class="btn btn-primary d-inline" @onclick="Send" disabled="@(!IsConnected)">Send</button>
            </label>
        </div>
    </div>
</div>

<div class="row mt-3 form-inline">
    <div class="col offset-md-6">
        <button class="btn btn-success" @onclick="Ask" disabled="@(!IsConnected)">Ask Question</button>    
        <select @bind="Category" class="form-control">
            <option value="">Random</option> 
            @foreach (var category in Categories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    private List<string> Categories;
    private string Category;

    protected override async Task OnInitializedAsync()
    {
        Categories = new List<string>();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user} says: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string, string, List<string>>("NewQuestion", (user, question, categories) =>
        {
            Categories = categories;

            var encodedMsg = $"{user} asks - {question}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<List<string>>("SetCategories", (categories) => {
            Categories = categories;
        });

        await hubConnection.StartAsync().ContinueWith(async x => {
            await hubConnection.SendAsync("GetCategories");
        });
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);

    Task Ask() => 
        hubConnection.SendAsync("AskQuestion", userInput, Category);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
        
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}