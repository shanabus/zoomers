@page "/"
@using ZoomersClient.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using Toolbelt.Blazor.SpeechSynthesis
@using ZoomersClient.Shared.Models.DTOs
@inject SpeechSynthesis SpeechSynthesis

<div class="row form-inline">
    <div class="col-sm-12 col-md-6">
        <div class="form-group">
            <label>
                Name:
                <input @bind="Name" class="form-control mx-2" />                
            </label>
             <button class="btn btn-outline-dark mr-4" @onclick="RandomLobby">
                <span class="oi oi-loop-square" aria-hidden="true"></span>
            </button>        
            <label>
                Rounds:
                <input type="number" min="1" max="5" @bind="Rounds" class="form-control mx-2" />
            </label>                
        </div>
    </div>
    <div class="">

    </div>
    <div class="col-md-6">
        @if(Voices != null)
        {
            <div class="form-group">
                <label>
                    Voice:
                    <select @bind="SelectedVoice" class="form-control mx-2">
                        <option value="">None</option>
                    @foreach(var voice in Voices)
                    {
                        <option value="@voice.Lang">@voice.Name (@voice.Lang)</option>
                    }
                    </select>
                </label>
                <button class="btn btn-info mx-2" @onclick="PreviewVoice">Preview</button>
                <button class="btn btn-success" @onclick="CreateGame">Create Game</button>
            </div>            
        }
        
    </div>
</div>

<hr>

<ul id="games">
    @foreach (var game in Games)
    {
        <li><a href="game/@game.Id">@game.Name</a></li>
    }
</ul>

@code {
    private string Name { get; set; }
    private int Rounds { get; set; }

    private IEnumerable<Game> Games = new List<Game>();
    IEnumerable<SpeechSynthesisVoice> Voices;
    private string SelectedVoice { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Rounds = 2;
        var result = await Http.GetFromJsonAsync<Game[]>("Games");
        
        if (result.Any())
        {
            Games = result;
        }
    }

    private async Task CreateGame()
    {
        var response = await Http.PostAsJsonAsync<CreateGameDto>("Games", new CreateGameDto { Name = Name, Voice = SelectedVoice, Rounds = Rounds });

        var game = await response.Content.ReadFromJsonAsync<Game>();

        NavigationManager.NavigateTo($"game/{game.Id}");
    }    

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.Voices = await this.SpeechSynthesis.GetVoicesAsync();
            this.StateHasChanged();
        }
    }

    private void RandomLobby()
    {
        Name = NameHelper.GetRandomLobbyName();
        var r = new Random();
        SelectedVoice = Voices.ToArray()[r.Next(Voices.Count())].Lang;

        PreviewVoice();

        StateHasChanged();
    }

    private void PreviewVoice()
    {
        if (!string.IsNullOrEmpty(SelectedVoice))
        {
            var text = !string.IsNullOrEmpty(this.Name) ? $"Lets play the game with a lobby named {this.Name}" : "This is how I will sound throughout the game";
            var utterancet = new SpeechSynthesisUtterance {
                Text = text,
                Lang = SelectedVoice, // BCP 47 language tag
                Pitch = 1.0, // 0.0 ~ 2.0 (Default 1.0)
                Rate = 1.0, // 0.1 ~ 10.0 (Default 1.0)
                Volume = 1.0 // 0.0 ~ 1.0 (Default 1.0)
            };
            this.SpeechSynthesis.Speak(utterancet);
        }
    }
}