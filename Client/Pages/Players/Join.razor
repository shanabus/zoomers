@page "/join"
@using Microsoft.AspNetCore.SignalR.Client
@using ZoomersClient.Client.Components
@using ZoomersClient.Shared.Models
@using ZoomersClient.Shared.Models.Enums
@inject NavigationManager NavigationManager
@inject ZoomersClient.Shared.Services.GameService GameService
@implements IAsyncDisposable

@if(!ShowPartyConnect)
{
    <div class="row mb-4">
        <div class="col-7">
            <input placeholder="Player name" maxlength="25" class="form-control w-100" @bind="Username" />
        </div>
        <div class="col-1">
            <button class="btn btn-outline-dark" @onclick="RandomPlayer">
                <span class="oi oi-loop-square" aria-hidden="true"></span>
            </button>
        </div>
        <div class="col-2 offset-2">
            <div style="background-color: @BackgroundColor;">
                <PlayerIconButton Icon="@ChosenIcon" />
            </div>            
        </div>
    </div>

    <hr class="my-4" />

    <div class="row">
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Dragon" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Dragon))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Alien" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Alien))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Vampire" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Vampire))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.PalmTree" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.PalmTree))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Tornado" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Tornado))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Mermaid" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Mermaid))" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Spider" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Spider))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Ghost" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Ghost))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Elephant" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Elephant))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Turtle" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Turtle))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Wizard" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Wizard))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Octopus" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Octopus))" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Poop" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Poop))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Robot" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Robot))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Cook" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Cook))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Elf" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Elf))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Devil" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Devil))" />
        </div>
        <div class="col-2">
            <PlayerIconButton Icon="PlayerIcon.Skull" OnClickCallback="@(e => ClickPlayerIcon(e, PlayerIcon.Skull))" />
        </div>
    </div>

    <hr class="my-4" />

    int colorIndex = 0;

    @for(var row = 0; row < 3; row++)
    {        
    <div class="row my-2">
        @for(var col = 0; col < 6; col++)
        {            
            var color = PlayerColors[colorIndex];

            <div class="col-2">
                <button class="btn w-100" style="background-color: @color;" @onclick="@(e => ClickChooseBackgroundColor(e, color))">&nbsp;</button>
            </div>

            colorIndex++;
        }        
    </div>
    }
        

    <div class="row mt-4">
        <div class="col">
            <button class="btn btn-success w-100" @onclick="(e => ConnectToParty())" disabled="@(!IsConnected || !PlayerIsValid)">CONNECT TO PARTY</button>
        </div>
    </div>
}


@if(ShowPartyConnect)
{
    <div class="row">
        <div class="col-4">
            <PartyButton Icon="@Party[0]" Class="@IsSelected(0)" OnClickCallback="@(e => ClickRemovePartyIcon(e, 0))"></PartyButton>
        </div>
        <div class="col-4">
            <PartyButton Icon="@Party[1]" Class="@IsSelected(1)" OnClickCallback="@(e => ClickRemovePartyIcon(e, 1))"></PartyButton>         
        </div>
        <div class="col-4">
            <PartyButton Icon="@Party[2]" Class="@IsSelected(2)" OnClickCallback="@(e => ClickRemovePartyIcon(e, 2))"></PartyButton>
        </div>
    </div>

    <hr class="my-3" />

    @if(ShowPartyIcons) {
        <div class="row">
            <div class="col-4">                  
                <PartyButton Icon="PartyIcon.Girl" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Girl))"></PartyButton>
            </div>
            <div class="col-4">
                <PartyButton Icon="PartyIcon.Boy" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Boy))"></PartyButton>         
            </div>
            <div class="col-4">
                <PartyButton Icon="PartyIcon.Grandma" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Grandma))"></PartyButton>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-4">
                <PartyButton Icon="PartyIcon.Scientist" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Scientist))"></PartyButton>            
            </div>
            <div class="col-4">
                <PartyButton Icon="PartyIcon.Cat" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Cat))"></PartyButton>          
            </div>
            <div class="col-4">
                <PartyButton Icon="PartyIcon.Grandpa" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Grandpa))"></PartyButton>          
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-4">
                <PartyButton Icon="PartyIcon.Dog" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Dog))"></PartyButton>         
            </div>
            <div class="col-4">
                <PartyButton Icon="PartyIcon.Zombie" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Zombie))"></PartyButton>
            </div>
            <div class="col-4">
                <PartyButton Icon="PartyIcon.Family" OnClickCallback="@(e => ClickPartyIcon(e, PartyIcon.Family))"></PartyButton>
            </div>
        </div>
    }

    @if(Game == null || Player == null)
    {
        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-success w-100" @onclick="(e => JoinTheGame())" disabled="@(!IsConnected || !PartyIsValid)">JOIN PARTY</button>
            </div>
        </div>
    } 

    @if(ShowStartButton)
    {
        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-primary w-100" @onclick="(e => StartGame())">START GAME</button>
            </div>
        </div>
    }
    
}

<div class="row mt-4">
    <div class="col">
        <label>@GameStatus</label>
    </div>
</div>

@code {
    
    private HubConnection hubConnection;

    public string Username { get; set;}
    public bool ShowPartyConnect { get; set;}
    public PlayerIcon ChosenIcon { get; set; }
    public string BackgroundColor { get; set;}
    public Player Player { get; set; }
    public bool PlayerIsValid => !string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(BackgroundColor) && ChosenIcon != PlayerIcon.None;

    public List<PartyIcon> Party { get; set;}
    public int IconIndex { get; set;}
    public bool ShowPartyIcons { get; set;}
    public bool PartyIsValid => Party.All(x => x != PartyIcon.None);
    public string[] PlayerColors => new string[] {
        "rgb(0,0,0)", // 42   // 126.5
        "rgb(42,42,0)",
        "rgb(100,0,0)",
        "rgb(170,0,0)",
        "rgb(215,10,0)",
        "rgb(255,50,0)",
        
        "rgb(150,50,0)",
        "rgb(180,90,0)",
        "rgb(210,130,42)",
        "rgb(240,170,80)",
        "rgb(20,135,68)",
        "rgb(37,178,96)",

        "rgb(109,219,177)", 
        "rgb(110,220,215)", 
        "rgb(20,80,221)", 
        "rgb(64,100,229)",
        "rgb(109,142,219)", 
        "rgb(255,255,255)"
    };
    
    public string GameStatus { get; set;}
    public Game Game { get; set; }

    public bool ShowStartButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Party = new List<PartyIcon>();
        Party.Add(PartyIcon.None);
        Party.Add(PartyIcon.None);
        Party.Add(PartyIcon.None);

        GameStatus = "Build your Player";

        ShowPartyIcons = true;

        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        // subscribe to other things
        hubConnection.On<Game, Player>("PlayerJoined", (game, player) => {
            Player = player;
            Game = game;
            GameStatus = $"Welcome to {game.Name} - Waiting for others to start...";
            
            StateHasChanged();
        });
        hubConnection.On<string>("PlayerJoinedError", (message) => {
            GameStatus = $"Error joining - {message}";
            StateHasChanged();
        });
        hubConnection.On<Game>("ReadyToStartGame", (game) => {
            Game = game;
            if (game.Players.Count() >= game.MinimumNumberOfPlayers && game.Players.First().Username == Username)
            {
                ShowStartButton = true;
            }
            StateHasChanged();
        });

        hubConnection.On<Guid>("GameStarted", (id) => {
            NavigationManager.NavigateTo($"play/{id}");
        });

        // start hub
        await hubConnection.StartAsync();

        // load previous user from Username / cookies
        
        // maybe check if they were supposed to already be in an active game?
    }

    private void ConnectToParty()
    {
        GameStatus = "Enter a valid code";
        ShowPartyConnect = true;
        StateHasChanged();
    }

    private string IsSelected(int index)
    {
        if (IconIndex == index && Party.Any(x => x == PartyIcon.None))
        {
            return "selected";
        }
        return "";
    }

    private void RandomPlayer()
    {
        Random random = new Random();
        Type type = typeof(PlayerIcon);

        Array values = type.GetEnumValues();
        int index = random.Next(values.Length - 1); // we plus/minus to avoid PlayerIcon.None
        ChosenIcon = (PlayerIcon)values.GetValue(index + 1);

        BackgroundColor = PlayerColors[random.Next(PlayerColors.Length)];

        Username = NameHelper.GetRandomName();

        StateHasChanged();
    }

    private void ClickPlayerIcon(MouseEventArgs eventArgs, PlayerIcon icon)
    {
        ChosenIcon = icon;
        StateHasChanged();
    }

    private void ClickChooseBackgroundColor(MouseEventArgs eventArgs, string color)
    {
        BackgroundColor = color;
        StateHasChanged();
    }

    private void ClickPartyIcon(MouseEventArgs e, PartyIcon icon) 
    {        
        Party[IconIndex] = icon;
        IconIndex = (IconIndex + 1) % 3;
        StateHasChanged();
    }

    private void ClickRemovePartyIcon(MouseEventArgs eventArgs, int index)
    {
        Party[index] = PartyIcon.None;
        IconIndex = index;
        StateHasChanged();
    }  

    private async Task JoinTheGame()
    {
        GameStatus = "Checking game servers";

        await hubConnection.SendAsync("JoinTheGame", Party, Username, ChosenIcon, BackgroundColor);

        GameStatus = "Waiting for response...";
        
        StateHasChanged();
    }

    private async Task StartGame() => await hubConnection.SendAsync("StartGame", Game.Id);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

}