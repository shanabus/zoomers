@inject HttpClient Http
@using Newtonsoft.Json
@using ZoomersClient.Client.Components.Players
@using ZoomersClient.Client.Components.Shared
@using ZoomersClient.Shared.Models.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@using Toolbelt.Blazor.SpeechSynthesis
@using ZoomersClient.Shared.Models.Enums
@inject SpeechSynthesis SpeechSynthesis
@inject IJSRuntime js

<style>
    body, #app {        
        overflow: hidden;
    }
</style>

@if (Game != null)
{
    @if(Game.State != GameState.RoundEnding && Game.State != GameState.RoundSummary && Game.State != GameState.Ended)
    {
    <div class='row @((Game.State != GameState.Ending)? "slide-in-blurred-bottom": "slide-out-fwd-center") @Game.State.ToString().ToLower()'>
        <div class="col">            
            @if(CurrentQuestion != null)
            {
            <div class="jumbotron swing-in-top-fwd" id="current-question">
                @CurrentQuestion.Question
            </div>
            }  
            
            @if(Game.CurrentRound > 0 && Game.Questions.Count > 0){
                <div class="game-round text-dark">
                    Question @Game.Questions.Count
                </div>
            }
            
            <div class="row">                    
                @if(CurrentPlayer != null)
                {                    
                var answerClass = (Game.State == GameState.SummaryIsEnding)? "swing-out-left-bck": "swing-in-left-fwd";
                <div class="col-4" id="on-deck">
                    <span class="@answerClass" id="on-deck__label">On Deck</span>
                    <PlayerBadge Player="CurrentPlayer" Class="@answerClass"></PlayerBadge>
                </div>                     
                }
                <div class='col-8 pt-3 align-self-center @((Game.State == GameState.SummaryIsEnding)? "slide-out-right": "slide-in-right")'>
                    <h3>@StatusMessage</h3>
                </div>
            </div>       

            <hr />
        </div>
    </div>   

        @if(Game.State == GameState.QuestionSummary && Game.AnsweredQuestions.Any(x => !string.IsNullOrEmpty(x.CurrentPlayerAnswer)))
        {
            <Scorecard @ref="scorecardRef" Score="@CurrentPlayerScore" Class="slide-in-blurred-top"></Scorecard>
        }    
    }           
    else if (Game.State == GameState.Ended)
    {
        <div class="row mb-4">
            <div class="col text-center">
                <h1 class="game-name swing-in-top-fwd bs-10">@Game.Name</h1>            
            </div>
        </div>
    }
        
    @if(Game.State == GameState.Playing)
    {
        <Timer @ref="PlayerTimerRef" Class="slide-in-blurred-bottom" TimeEllapsed="AnswersFinished"></Timer>
    }  

    @if(Game.State == GameState.PlayerChoosing)
    {
        <Timer @ref="CurrentPlayerTimerRef" Class="slide-in-blurred-bottom current-player" TimeEllapsed="QuestionCompletedAnswer"></Timer>
    }  
    
    @if(Game.State == GameState.RoundSummary || Game.State == GameState.RoundEnding)
    {
    var answerClass = (Game.State == GameState.RoundEnding)? "swing-out-left-bck": "swing-in-left-fwd";
    <div class='row @answerClass'>
        <div class="col">            
            <h2>Round Summary</h2>
            <hr />
        </div>
    </div>    
    }

    @if(Game.State == GameState.Playing || Game.State == GameState.QuestionSummary || Game.State == GameState.PlayerChoosing)
    {        
    <div class="row">

        @if(PlayersAnswered.Any())
        {
            @foreach(var player in PlayersAnswered)
            {
                var answerClass = (Game.State == GameState.SummaryIsEnding)? "slide-out-fwd-center": "slide-in-blurred-bottom";

                <div class="col-4 my-2 p-1 @answerClass">
                    <div class="player-answer-summary">
                        <PlayerBadge Player="@player" Class="">                        
                            @if(PlayerLove != null && PlayerLove.ContainsKey(player.Id))
                            {
                                <span class="flip-in-hor-bottom" style="color: goldenrod;">+ @PlayerLove[player.Id]</span>
                            } 
                        </PlayerBadge>
                        
                        @if(Game.State == GameState.QuestionSummary && !CurrentPlayerTimedOut)
                        {
                            var playerAnswer = Game.CurrentAnswers().FirstOrDefault(x => x.Player.Id == player.Id);

                            <PlayerAnswerResult Answer="@playerAnswer" CurrentPlayer="CurrentPlayer" Show="@(ScoreShown > PlayersAnswered.IndexOf(player))"></PlayerAnswerResult>
                        }    
                    </div>
                </div>
            }
        }
        else if (CurrentQuestion != null && !string.IsNullOrEmpty(CurrentQuestion.ImageUrl))
        {
            <div class="col text-center">
                <img src="@CurrentQuestion.ImageUrl" id="game-host-image" class="slide-in-blurred-bottom img-fluid" />
            </div>
        }
    </div>
    }

    @if(Game.State == GameState.RoundSummary || Game.State == GameState.RoundEnding || Game.State == GameState.Ended)
    {
        <Scores Game="Game"></Scores>

        @if(Game.State == GameState.Ended)
        {
            <div class="row mt-4">
                <div class="col text-center">
                    <button class="btn btn-success btn-lg" @onclick="ResetGameAsync">PLAY AGAIN</button>
                </div>
            </div>
        }
    }
}


@code {

    [Parameter]
    public GameDto Game { get; set; }
    [Parameter]
    public EventCallback<GameDto> OnGameReset { get; set; }
    [Parameter]
    public GameQuestionDto CurrentQuestion { get; set; }
        
    public PlayerDto CurrentPlayer { get; set; }
    public string StatusMessage { get; set; }    
    public List<PlayerDto> PlayersAnswered => Game.CurrentAnswers().Select(x => x.Player).ToList();

    public Dictionary<Guid, int> PlayerLove { get; set; }
    public int CurrentPlayerScore { get; set; }
    public bool CurrentPlayerTimedOut { get; set; }
    private int ScoreShown { get; set; }

    private bool UseTimers { get; set; }
    private Timer PlayerTimerRef { get; set; }
    private Timer CurrentPlayerTimerRef { get; set; }
    private Scorecard scorecardRef { get; set; }
    
    private HubConnection hubConnection;
    
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        // connect to hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/wordplayhub"))
            .Build();

        // subscribe to game events             
        hubConnection.On<GameDto>("GameConnected", async (game) => {
            Game = game;

            // get player on deck, ask first question
            // Console.WriteLine(JsonConvert.SerializeObject(Game));

            // todo: figure out if we need to ask a question?
            // this only really handles mid-question refreshes UI states
            if (Game.Questions.Any() && Game.State != GameState.Ended)
            {
                Console.WriteLine("GameConnected - Questions.Any() - " + Game.State);     
                
                await AskQuestionAsync();
            }
            else if (Game.State == GameState.PlayerChoosing)
            {
                // todo: add this logic!
            }
            else if (Game.State == GameState.Ended)
            {
                await GameOver();
            }
            else
            {
                await hubConnection.SendAsync("AskQuestion", Game.Id, null);
            }
        });

        hubConnection.On<GameDto, GameQuestionDto, PlayerDto>("QuestionReady", async (game, question, player) => {   
            // reset UI            
            Game = game;
           
            await AskQuestionAsync();
        });

        hubConnection.On<GameDto, PlayerDto>("QuestionAnswered", async (game, player) => {
            Game = game;
            PlayersAnswered.Add(player);

            await js.InvokeVoidAsync("PlayAudioFile", $"/sounds/{player.Sound}.mp3");

            StateHasChanged();

            if (PlayersAnswered.Count >= Game.Players.Count - 1)
            {
                await AnswersFinished();
            }
        });

        hubConnection.On<GameDto, SpeechSynthesisUtterance>("AnswersFinished", (game, phrase) => {
            Game = game;
            StatusMessage = phrase.Text;
            UseTimers = false;
            PlayerTimerRef.ResetTimer();
            CurrentPlayerTimerRef.StartTimer(30);
            StateHasChanged();
            SpeakPhrase(phrase.Text);
        });        
        
        hubConnection.On<bool, GameDto>("QuestionSummaryStarted", async (timeExpired, game) => {
            StatusMessage = "Time to see how you did";
            Game = game;            
            CurrentPlayerTimedOut = timeExpired;
            StateHasChanged();

            CurrentPlayerTimerRef.ResetTimer();
            var correctQuestions = 0;

            if (timeExpired)
            {
                Console.WriteLine("CurrentPLayer did not submit answers");

                // fog horn
                await js.InvokeVoidAsync("PlayAudioFile", "/sounds/wrong_5.mp3");

                await Task.Delay(3000);
                
                // wait, then talk some trash and give other points players?   
                SpeakPhrase("Since " + CurrentPlayer.Username + " was sleeping that round, each player will get their points back.");

                foreach(var answer in Game.CurrentAnswers())
                {
                    await Task.Delay(3000);
                    ScoreShown++;
                    
                    if (!answer.AnswerTimedOut)
                    {
                        PlayerLove[answer.Player.Id] += (100 * Game.CurrentRound);
                        await hubConnection.SendAsync("AddToPlayerScoreAsync", answer.Player.Id, (100 * Game.CurrentRound));
                        await PlayRight();
                    }
                    
                    StateHasChanged();
                }
            }
            else
            {                
                await js.InvokeVoidAsync("PlayAudioFile", "/sounds/tada_1.mp3");

                foreach(var player in PlayersAnswered)
                {
                    var playerAnswer = Game.CurrentAnswers().FirstOrDefault(x => x.Player.Id == player.Id);

                    await Task.Delay(3000);
                    ScoreShown++;
                    
                    if (playerAnswer?.Answer == playerAnswer?.CurrentPlayerAnswer)
                    {
                        correctQuestions++;
                        CurrentPlayerScore = CurrentPlayerScore + (100 * Game.CurrentRound);
                        await PlayRight();
                    }
                    else
                    {
                        await PlayWrong();
                    }
                    
                    StateHasChanged();
                }
            }                        
            
            await CheckBanterEngineAsync(CurrentPlayerScore, correctQuestions);

            await Task.Delay(4000);            
            await hubConnection.SendAsync("QuestionFinished", Game.Id, CurrentQuestion.Id, CurrentPlayerScore);
        });

        hubConnection.On<GameDto>("ProceedToNextQuestion", async (game) => {            
            CurrentPlayerTimedOut = false;
            StateHasChanged();
            await Task.Delay(700);   
            Game = game;            
            StateHasChanged();
            
            await hubConnection.SendAsync("AskQuestion", Game.Id, null);
        });

        hubConnection.On<GameDto>("RoundOver", async (game) => {            
            Game = game;
            
            if(Game.State != GameState.Ended)
            {
                ScoreShown = 0;
                // State = GameState.RoundSummary;
                StateHasChanged();
                
                await js.InvokeVoidAsync("PlayMusic", $"/sounds/round_end_music.mp3");

                var leader = Game.Players.OrderByDescending(x => x.Score).ThenBy(x => x.LoveScore).FirstOrDefault();

                await Task.Delay(4000);
                
                SpeakPhrase($"So far with {leader.Username} is in the lead with {leader.Score} points");

                var topPlayers = Game.Players.Where(x => x.Score == leader.Score);
                if(topPlayers.Where(x => x.Id != leader.Id).Count() > 0)
                {
                    var nextPlayer = topPlayers.Skip(1).First();
                    var phrase = (leader.LoveScore > nextPlayer.LoveScore)? $"{nextPlayer.Username} I would have said your name but you don't get as much love" : "It is anybody's game so lets begin the next round";
                    SpeakPhrase(phrase);
                    await Task.Delay(2000);
                }
                
                await Task.Delay(4500);
                // State = GameState.RoundSummary;
                StateHasChanged();

                await Task.Delay(2000);

                await hubConnection.SendAsync("AskQuestion", Game.Id, null);
            }
        });

        hubConnection.On<GameDto>("GameOver", async (game) => {
            Console.WriteLine("GameOver on host - " + game.State);
            Game = game;
            
            await GameOver();
        }); 
        
        hubConnection.On<GameDto>("GameReset", async (game) => {
            Game = game;
            await OnGameReset.InvokeAsync(game);
        }); 

        // process the love
        hubConnection.On<PlayerDto, PlayerDto, AnswerReaction>("ReactionReceived", (fromPlayer, toPlayer, reaction) => {           
            if (PlayerLove.ContainsKey(toPlayer.Id))
            {
                PlayerLove[toPlayer.Id] += 1;
            }
            else
            {
                PlayerLove.Add(toPlayer.Id, 1);
            }
            StateHasChanged();
        });

        // start hub
        await hubConnection.StartAsync();
        
        // update connection and begin!
        await hubConnection.SendAsync("UpdateGameConnectionId", Game.Id);
    }

    private async Task AskQuestionAsync()
    {        
        Console.WriteLine("AskQuestionAsync");
        CurrentQuestion = Game.Questions.Last();
        CurrentPlayer = Game.Players.FirstOrDefault(x => x.OnDeck);
        CurrentPlayerScore = 0;
        ScoreShown = 0;
        StatusMessage = "";
        PlayerLove = new Dictionary<Guid, int>();

        StateHasChanged();      

        await js.InvokeVoidAsync("PlayAudioFile", "/sounds/whoosh_1.mp3");
        await Task.Delay(750);

        PlayerTimerRef.StartTimer(30);

        StateHasChanged();           

        SpeakPhrase(CurrentQuestion.Question);     
    }

    public async Task AnswersFinished()
    {        
        await hubConnection.SendAsync("AnswersFinished", Game.Id);
        UseTimers = false;
        PlayerTimerRef.ResetTimer();
        Game.State = GameState.PlayerChoosing;
        StateHasChanged();
    }

    async Task QuestionCompletedAnswer()
    {
        CurrentPlayerTimerRef.ResetTimer();

        await hubConnection.SendAsync("QuestionCompletedAnswer", Game.Id, true, new List<AnsweredQuestionDto>());
        
        SpeakPhrase("Oh no, you ran out of time!");
    }

    public void SpeakPhrase(string message)
    {
        if (this.SpeechSynthesis.Speaking)
        {
            this.SpeechSynthesis.Cancel();
        }
        
        this.SpeechSynthesis.Speak(new SpeechSynthesisUtterance() {
            Lang = Game.Voice,
            Text = message,
            Volume = 0.7
        });
    }
    
    async Task PlayWrong()
    {
        var r = new Random();
        var sound = r.Next(1,6);
        StateHasChanged();

        await js.InvokeVoidAsync("PlayAudioFile", "/sounds/wrong_" + sound + ".mp3");
    }

    async Task PlayRight()
    {
        var r = new Random();
        var sound = r.Next(1,4);
        StateHasChanged();

        await js.InvokeVoidAsync("PlayAudioFile", "/sounds/right_" + sound + ".mp3");
    }

    async Task GameOver()
    {
        ScoreShown = 0;
        StatusMessage = "Game Over";
        // State = game.State; // GameState.Ending;
        StateHasChanged();

        SpeakPhrase("That wraps up this game. Let's check the scores.");

        await js.InvokeVoidAsync("PlayMusic", $"/sounds/game_end_music.mp3");
                    
        await Task.Delay(4000);

        if (Game.State == GameState.Ended)            
        {                
            var winner = Game.Players.OrderByDescending(x => x.Score).FirstOrDefault();

            SpeakPhrase($"With {winner.Score} points, the winner is " + winner.Username);
            
            await Task.Delay(2500);

            if (Game.Players.Sum(x => x.Score) == 0)
            {
                SpeakPhrase("But you all need to learn more about each other");
            }
            if (Game.Players.Count(x => x.Score == winner.Score) > 1)
            {
                var otherWinners = string.Join(", ", Game.Players.Where(x => x.Score == winner.Score && x.Id != winner.Id).Select(x => x.Username).ToArray());
                SpeakPhrase($"Although there were others in the running. Congratulations, you are all winners {otherWinners}");
            }
        }
    }

    async Task CheckBanterEngineAsync(int currentPlayerScore, int correctQuestions)
    {
        var chanceOfBanter = new Random();
        var chance = 65;
        var threshold = 10;
        var spoken = 0;
        var delay = 2500;

        if (chanceOfBanter.Next(300) > chance && Game.CurrentAnswers().All(x => x.AnswerTimedOut))
        {
            spoken++;
            SpeakPhrase("If nobody is answering the questions then the game does not really work");
            await Task.Delay(2200);
        }

        if (chanceOfBanter.Next(100) > chance && currentPlayerScore == 0 && Game.CurrentAnswers().All(x => x.Guess == 0))
        {
            spoken++;
            SpeakPhrase("Its ok, nobody thought you would get it right");
            await Task.Delay(1500);
        }

        if (chanceOfBanter.Next(100) > chance && correctQuestions == Game.AnsweredQuestions.Count && Game.CurrentAnswers().Max(x => x.Guess) < correctQuestions)
        {
            spoken++;
            SpeakPhrase("You exceeded their expectations. Good job.");
            await Task.Delay(1500);
        }

        if (chanceOfBanter.Next(100) > chance && correctQuestions > 0 && Game.CurrentAnswers().Any(x => x.Guess == correctQuestions))
        {
            spoken++;
            var correctPlayer = Game.CurrentAnswers().FirstOrDefault(x => x.Guess == correctQuestions);
            SpeakPhrase($"{correctPlayer.Player.Username} knew you would get that many correct. Points for them!");
            await Task.Delay(1800);
        }
        
        if (Game.CurrentAnswers().All(x => string.IsNullOrEmpty(x.CurrentPlayerAnswer)) && Game.CurrentAnswers().Any(x => !x.AnswerTimedOut)) {
            SpeakPhrase("Player on Deck had an no answer? Strange...");
            await Task.Delay(1500);
        }

        if (chanceOfBanter.Next(100) > chance)
        {
            spoken++;
            var lovelyPlayer = Game.Players.OrderByDescending(x => x.LoveScore).First();
            if (lovelyPlayer.LoveScore > threshold)
            {
                await Task.Delay(delay);  
                var phrase = (chanceOfBanter.Next(100) > 50)? $"{lovelyPlayer.Username}, they really love you out there" : $"{lovelyPlayer.Username} is feeling the love";
                SpeakPhrase(phrase);
            }
        }
        
        if (chanceOfBanter.Next(100) > chance)
        {
            spoken++;
            var hatedPlayer = Game.Players.OrderByDescending(x => x.HateScore).First();
            if (hatedPlayer.HateScore > threshold)
            {
                await Task.Delay(delay);  
                var phrase = (chanceOfBanter.Next(100) > 50)? $"You guys are giving {hatedPlayer.Username} a lot of crap" : $"{hatedPlayer.Username} may need an umbrella for all that poop";
                SpeakPhrase(phrase);
            }
        }

        if (chanceOfBanter.Next(100) > chance && spoken < 2)
        {
            spoken++;
            var lovingPlayer = Game.Players.OrderByDescending(x => x.LoveReactions).First();
            if (lovingPlayer.LoveReactions > threshold)
            {
                await Task.Delay(delay);  
                var phrase = (chanceOfBanter.Next(100) > 50)? $"{lovingPlayer.Username} is sharing the love" : $"So much love coming from {lovingPlayer.Username}";
                SpeakPhrase(phrase);
            }
        }

        if (chanceOfBanter.Next(100) > chance && spoken < 2)
        {
            var hatingPlayer = Game.Players.OrderByDescending(x => x.HateReactions).First();
            if (hatingPlayer.HateReactions > threshold)
            {
                await Task.Delay(delay);  
                var phrase = (chanceOfBanter.Next(100) > 50)? $"Why so much hate, {hatingPlayer.Username}?" : $"{hatingPlayer.Username} has a lot of poop to spread.";
                SpeakPhrase(phrase);
            }
        }
    }

    public async Task ResetGameAsync()
    {
        Console.WriteLine("Game restart clicked!");
        await hubConnection.SendAsync("ResetGame", Game.Id);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }    
}
